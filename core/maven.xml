<?xml version="1.0"?>
<project
        xmlns:j="jelly:core"
        xmlns:velocity="jelly:velocity"
        xmlns:ant="jelly:ant"
        xmlns:jsl="jelly:jsl"
        xmlns:artifact="artifact"
        xmlns:maven="jelly:maven"
        xmlns:util="jelly:util"
        xmlns:jetty="jelly:jetty"
        xmlns:define="jelly:define"
        xmlns:x="jelly:xml"
        xmlns:interact="jelly:interaction"
        >

    <!-- Create soapui distribution -->

    <goal name="soapui:dist">

        <attainGoal name="clean"/>
        <j:set var="skipPdf" value="${soapui.build.skipPdf}"/>
        <j:if test="${skipPdf!='true'}">
            <attainGoal name="pdf"/>
        </j:if>

        <attainGoal name="jar:install"/>
        <attainGoal name="jnlp"/>
        <attainGoal name="site:generate"/>

        <!--   <attainGoal name="soapui:generate-plugin"/>   -->
        <attainGoal name="dist:build-src"/>
        <attainGoal name="soapui:create-docs-zip"/>
        <attainGoal name="soapui:create-binary-dist"/>
        <attainGoal name="soapui:create-standalone-binary-dist"/>
        <attainGoal name="soapui:make-installer"/>

        <ant:copy todir="${maven.build.dir}/docs/repository/eviware/jars">
            <ant:fileset file="${maven.repo.local}/eviware/jars/*-xmlbeans-${pom.currentVersion}.jar"/>
            <ant:fileset file="${maven.build.dir}/soapui-${pom.currentVersion}.jar"/>
        </ant:copy>

        <attainGoal name="soapui:changelog"/>
        <attainGoal name="soapui:publish"/>

    </goal>

    <preGoal name="pdf:pdf">
        <ant:copy todir="${maven.build.dir}/pdf/images" flatten="true">
            <fileset dir="xdocs" includes="**/*.gif"/>
        </ant:copy>
    </preGoal>


    <!-- Create soapui SNAPSHOT distribution -->

    <goal name="soapui:snapshot-dist">

        <attainGoal name="clean"/>
        <j:set var="skipPdf" value="${soapui.build.skipPdf}"/>
        <j:if test="${skipPdf!='true'}">
            <attainGoal name="pdf"/>
        </j:if>
        <attainGoal name="jar:install"/>
        <attainGoal name="jnlp"/>
        <attainGoal name="news:report"/>
        <attainGoal name="xdoc"/>

        <attainGoal name="soapui:create-binary-dist"/>

        <!-- <attainGoal name="soapui:create-standalone-binary-dist"/> -->

        <ant:copy todir="${maven.build.dir}/docs/repository/eviware/jars">
            <ant:fileset file="${maven.repo.local}/eviware/jars/*-xmlbeans-${pom.currentVersion}.jar"/>
            <ant:fileset file="${maven.build.dir}/soapui-${pom.currentVersion}.jar"/>
        </ant:copy>

    </goal>

    <!-- Create soapui SNAPSHOT distribution -->

    <goal name="soapui:nightly-build">

        <attainGoal name="clean"/>
        <attainGoal name="soapui:generate-xml-beans"/>
        <attainGoal name="jar:install"/>
        <attainGoal name="jnlp"/>

        <attainGoal name="soapui:create-binary-dist"/>
        <attainGoal name="soapui:create-standalone-binary-dist"/>
        <attainGoal name="soapui:make-installer"/>

        <attainGoal name="soapui:changelog"/>
        <attainGoal name="soapui:publish"/>
    </goal>

    <goal name="soapui:changelog">
        <attainGoal name="maven-changelog-plugin:report"/>
        <util:file name="${maven.build.dir}/changelog.xml" var="changelogFile"/>
        <x:parse var="doc" xml="${changelogFile}"/>
        <j:file name="${maven.build.dir}/distributions/${pom.artifactId}-changelog.txt" omitXmlDeclaration="true" trim="true">
            <j:include file="src/jsl/changelog2txt.jsl"/>
        </j:file>
    </goal>

    <!-- fix apos entities for IE in urchinTracker onClicks -->

    <postGoal name="xdoc">

        <ant:copy todir="${maven.build.dir}">
            <ant:fileset dir="${maven.build.dir}/docs">
                <ant:include name="index.html"/>
                <ant:include name="snapshot.html"/>
                <ant:include name="new_and_noteworthy_*.html"/>
                <ant:include name="snapshot.html"/>
            </ant:fileset>

            <ant:filterchain>
                <ant:filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
                    <ant:param type="tokenchar" name="begintoken" value="&amp;"/>
                    <ant:param type="tokenchar" name="endtoken" value=";"/>
                    <ant:param type="token" name="apos" value="'"/>
                </ant:filterreader>
            </ant:filterchain>
        </ant:copy>

        <!-- copy back -->
        <ant:copy todir="${maven.build.dir}/docs">
            <ant:fileset dir="${maven.build.dir}">
                <ant:include name="index.html"/>
                <ant:include name="snapshot.html"/>
                <ant:include name="new_and_noteworthy_*.html"/>
                <ant:include name="snapshot.html"/>
            </ant:fileset>
        </ant:copy>
        
        <!-- copy wstf projects -->
        <ant:copy todir="${maven.build.dir}/docs/wstf/projects">
        	<ant:fileset dir="src/wstf">
        	    <ant:include name="*.xml"/>
        	</ant:fileset>
        </ant:copy>

    </postGoal>

    <preGoal name="java:jar-resources">
        <j:set var="buildNumber" value="${soapui.build.number}"/>
        <echo>buildNumber = ${buildNumber}</echo>

        <j:if test="${empty(buildNumber)}">
            <j:set var="buildNumber" value="[internal]"/>
        </j:if>

        <ant:propertyfile file="src/java/com/eviware/soapui/resources/conf/buildinfo.txt">
            <ant:entry key="build.number" value="${buildNumber}"/>
            <ant:entry key="build.date" type="date" value="now"/>
        </ant:propertyfile>
    </preGoal>

    <!-- add activation / javamail / bouncycastle to jnlp distribution -->

    <postGoal name="jnlp">
        <ant:copy todir="${maven.jnlp.dir}">
            <ant:fileset dir="src/jnlp">
                <ant:include name="*.jnlp"/>
            </ant:fileset>
            <ant:filterset>
                <ant:filter token="SOAPUICODEBASE" value="${maven.jnlp.http.codebase}"/>
            </ant:filterset>
        </ant:copy>

        <ant:copy todir="${maven.jnlp.dir}"
                  file="${pom.getDependencyPath('activation:activation')}"/>

        <ant:copy todir="${maven.jnlp.dir}"
                  file="${pom.getDependencyPath('javamail:javamail')}"/>

        <ant:copy todir="${maven.jnlp.dir}"
                  file="${pom.getDependencyPath('bouncycastle:bcprov')}"/>

    </postGoal>

    <!-- create doc zipz -->
    <goal name="soapui:create-docs-zip">
        <ant:zip destfile="${maven.build.dir}/distributions/soapui-docs-${pom.currentVersion}.zip">
            <ant:fileset dir="${maven.build.dir}/docs">
                <ant:exclude name="jnlp/${pom.currentVersion}/*.*"/>
                <ant:exclude name="repository/eviware/jars/*.*"/>
                <ant:exclude name="*.pdf"/>
            </ant:fileset>
        </ant:zip>
    </goal>

    <!-- create binary dist -->

    <goal name="soapui:create-binary-dist">
        <ant:delete dir="${maven.build.dir}/dist"/>
        <ant:mkdir dir="${maven.build.dir}/dist"/>
        <ant:mkdir dir="${maven.build.dir}/distributions"/>
        <!-- <ant:mkdir dir="${maven.build.dir}/dist/docs"/>  -->
        <ant:mkdir dir="${maven.build.dir}/dist/lib"/>
        <ant:mkdir dir="${maven.build.dir}/dist/bin"/>

        

        <!-- build classpath for batch files -->
        <j:set var="soapuiclasspath" trim="false" value="set CLASSPATH=%SOAPUI_HOME%soapui-${pom.currentVersion}.jar"/>
        <j:set var="soapuishclasspath" trim="false"
               value="SOAPUI_CLASSPATH=$$SOAPUI_HOME/bin/soapui-${pom.currentVersion}.jar"/>
        <j:forEach var="lib" items="${pom.artifacts}">
            <j:set var="dep" value="${lib.dependency}"/>
            <j:if test="${dep.getProperty('jnlp.jar')=='true' || dep.getProperty('eclipse.jar')=='true'}">
                <j:set var="soapuiclasspath">${soapuiclasspath}
                    set CLASSPATH=%CLASSPATH%;%SOAPUI_HOME%..\lib\${lib.file.name}
                </j:set>
                <j:set var="soapuishclasspath">${soapuishclasspath}
                    SOAPUI_CLASSPATH=$$SOAPUI_CLASSPATH:$$SOAPUI_HOME/lib/${lib.file.name}
                </j:set>
            </j:if>
        </j:forEach>

		<j:set var="soapuiclasspathcompact" trim="false" value="set CLASSPATH=%SOAPUI_HOME%${pom.artifactId}-${pom.currentVersion}.jar;%SOAPUI_HOME%..\lib\*;"/>

        <ant:copy todir="${maven.build.dir}/dist">
            <ant:fileset dir="src/dist">
                <ant:include name="**/*.sh"/>
                <ant:include name="**/*.bat"/>
            </ant:fileset>
            <ant:filterset>
                <ant:filter token="SOAPUICLASSPATH" value="${soapuiclasspath}"/>
                <ant:filter token="SOAPUISHCLASSPATH" value="${soapuishclasspath}"/>
                <ant:filter token="SOAPUIVERSION" value="${pom.currentVersion}"/>
                <ant:filter token="SOAPUICLASSPATHCOMPACT" value="${soapuiclasspathcompact}"/>
            </ant:filterset>
        </ant:copy>

        <ant:copy todir="${maven.build.dir}/dist">
            <ant:fileset dir="src/dist">
                <ant:exclude name="**/*.sh"/>
                <ant:exclude name="**/*.bat"/>
            </ant:fileset>
        </ant:copy>

        <!-- create a scanner for sh files so we can replace linebreaks.. -->
        <ant:fileScanner var="shscanner">
            <ant:fileset dir="${maven.build.dir}/dist/bin">
                <ant:include name="*.sh"/>
            </ant:fileset>
        </ant:fileScanner>

        <!-- Fix linebreaks -->
        <j:forEach var="sh" items="${shscanner.iterator()}" trim="yes">
            <util:loadText file="${sh}" var="shfile"/>
            <j:set var="shfile" value="${shfile.replace( '\r', ' ' )}"/>
            <j:file name="${maven.build.dir}/dist/bin/${sh.name}" omitXmlDeclaration="true">${shfile}</j:file>
        </j:forEach>

        <ant:copy todir="${maven.build.dir}/dist/lib">
            <ant:fileset dir="${maven.build.dir}/docs/jnlp/${pom.currentVersion}" excludes="**/soapui-${pom.currentVersion}.jar"/>
        </ant:copy>

        <ant:copy todir="${maven.build.dir}/dist/bin">
            <ant:fileset dir="${maven.build.dir}/docs/jnlp/${pom.currentVersion}" includes="**/soapui-${pom.currentVersion}.jar"/>
        </ant:copy>

        <ant:zip destfile="${maven.build.dir}/distributions/soapui-${pom.currentVersion}-bin.zip">
            <zipfileset dir="${maven.build.dir}/dist" prefix="soapui-${pom.currentVersion}"/>
        </ant:zip>

        <j:if test="${pom.currentVersion == 'SNAPSHOT'}">
            <ant:mkdir dir="${maven.build.dir}/docs/download"/>
            <ant:copy file="${maven.build.dir}/distributions/soapui-SNAPSHOT-bin.zip"
                      tofile="${maven.build.dir}/docs/download/soapui-SNAPSHOT-bin.zip"/>
        </j:if>

    </goal>

    <!-- Create soapui maven-plugin, copy to target/docs/repository/eviware/plugins -->

    <goal name="soapui:generate-plugin">

        <maven:maven goals="clean,plugin,plugin:install" descriptor="src/maven-soapui-plugin/project.xml"/>

        <ant:mkdir dir="${maven.build.dir}/docs/repository/eviware/plugins"/>
        <ant:copy todir="${maven.build.dir}/docs/repository/eviware/plugins">
            <ant:fileset dir="src/maven-soapui-plugin/target" includes="*.jar"/>
        </ant:copy>

    </goal>

    <postGoal name="jar:install">
        <ant:mkdir dir="${user.home}/.m2/repository/eviware/soapui/${pom.currentVersion}"/>
        <ant:copy todir="${user.home}/.m2/repository/eviware/soapui/${pom.currentVersion}">
            <ant:fileset dir="${maven.build.dir}" includes="*.jar"/>
        </ant:copy>
        <j:file name="${user.home}/.m2/repository/eviware/soapui/${pom.currentVersion}/soapui-${pom.currentVersion}.pom"
                escapeText="false">
            <![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>eviware</groupId>
  <artifactId>soapui</artifactId>
  <version>${pom.currentVersion}</version>
</project>]]>
        </j:file>
    </postGoal>

    <!-- Create soapui xmlbeans classes used for configuration files -->

    <goal name="soapui:generate-xml-beans">

        <ant:mkdir dir="${maven.build.dir}"/>
        <ant:mkdir dir="${maven.build.dir}/classes"/>

        <ant:path id="xmlbeans-classpath">
            <ant:pathelement location="${pom.getDependencyPath('xmlbeans:xbean')}"/>
            <ant:pathelement location="${pom.getDependencyPath('xmlbeans:jsr173_1.0_api')}"/>
            <ant:pathelement location="${pom.getDependencyPath('xmlbeans:xmlpublic')}"/>
            <ant:pathelement location="${pom.getDependencyPath('xmlbeans:xbean_xpath')}"/>
        </ant:path>

        <ant:taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean"
                     classpathref="xmlbeans-classpath"/>

        <attainGoal name="clean"/>
        <ant:mkdir dir="${maven.build.dir}"/>

        <!--
            Create soapui-xmlbeans
        -->

        <ant:xmlbean destfile="${maven.repo.local}/eviware/jars/soapui-xmlbeans-${pom.currentVersion}.jar"
                     classpathref="xmlbeans-classpath" javasource="1.5">
            <fileset dir="src/xsd/soapui" excludes="coverage.xsd"/>
        </ant:xmlbean>

<ant:mkdir dir="${user.home}/.m2/repository/eviware/soapui-xmlbeans/${pom.currentVersion}"/>
        <ant:copy todir="${user.home}/.m2/repository/eviware/soapui-xmlbeans/${pom.currentVersion}"
                  file="${maven.repo.local}/eviware/jars/soapui-xmlbeans-${pom.currentVersion}.jar"/>

        <j:file name="${user.home}/.m2/repository/eviware/soapui-xmlbeans/${pom.currentVersion}/soapui-xmlbeans-${pom.currentVersion}.pom"
                escapeText="false">
            <![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>eviware</groupId>
  <artifactId>soapui-xmlbeans</artifactId>
  <version>${pom.currentVersion}</version>
</project>]]>
        </j:file>

        <!--
            Create soapui-coverage-xmlbeans
        -->

        <ant:xmlbean destfile="${maven.repo.local}/eviware/jars/soapui-coverage-xmlbeans-${pom.currentVersion}.jar"
                     classpathref="xmlbeans-classpath" javasource="1.5">
            <fileset dir="src/xsd/soapui" includes="coverage.xsd"/>
        </ant:xmlbean>

        <ant:mkdir dir="${user.home}/.m2/repository/eviware/soapui-coverage-xmlbeans/${pom.currentVersion}"/>
        <ant:copy todir="${user.home}/.m2/repository/eviware/soapui-coverage-xmlbeans/${pom.currentVersion}"
                  file="${maven.repo.local}/eviware/jars/soapui-coverage-xmlbeans-${pom.currentVersion}.jar"/>

        <j:file name="${user.home}/.m2/repository/eviware/soapui-coverage-xmlbeans/${pom.currentVersion}/soapui-coverage-xmlbeans-${pom.currentVersion}.pom"
                escapeText="false">
            <![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>eviware</groupId>
  <artifactId>soapui-coverage-xmlbeans</artifactId>
  <version>${pom.currentVersion}</version>
</project>]]>
        </j:file>

          <!--
            Create ext-xmlbeans
        -->

        <ant:xmlbean destfile="${maven.repo.local}/eviware/jars/ext-xmlbeans-1.1.jar"
                     classpathref="xmlbeans-classpath" javasource="1.5">
            <fileset dir="src/xsd/wsi"/>
            <fileset dir="src/xsd/jboss"/>
            <fileset dir="src/xsd/junit"/>
        </ant:xmlbean>

        <ant:mkdir dir="${user.home}/.m2/repository/eviware/ext-xmlbeans/1.1"/>
        <ant:copy todir="${user.home}/.m2/repository/eviware/ext-xmlbeans/1.1"
                  file="${maven.repo.local}/eviware/jars/ext-xmlbeans-1.1.jar"/>

         <j:file name="${user.home}/.m2/repository/eviware/ext-xmlbeans/1.1/ext-xmlbeans-1.1.pom"
                escapeText="false">
            <![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>eviware</groupId>
  <artifactId>ext-xmlbeans</artifactId>
  <version>1.1</version>
</project>]]>
        </j:file>

         <!--
            Create wsdl-xmlbeans
        -->

        <ant:xmlbean destfile="${maven.repo.local}/eviware/jars/wsdl-xmlbeans-1.1.jar"
                     classpathref="xmlbeans-classpath" javasource="1.5">
            <fileset dir="src/xsd/wsdl"/>
        </ant:xmlbean>

        <ant:mkdir dir="${user.home}/.m2/repository/eviware/wsdl-xmlbeans/1.1"/>
        <ant:copy todir="${user.home}/.m2/repository/eviware/wsdl-xmlbeans/1.1"
                  file="${maven.repo.local}/eviware/jars/wsdl-xmlbeans-1.1.jar"/>

         <j:file name="${user.home}/.m2/repository/eviware/wsdl-xmlbeans/1.1/wsdl-xmlbeans-1.1.pom"
                escapeText="false">
            <![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>eviware</groupId>
  <artifactId>wsdl-xmlbeans</artifactId>
  <version>1.1</version>
</project>]]>
        </j:file>

         <!--
            Create policy-xmlbeans
        -->

        <ant:xmlbean destfile="${maven.repo.local}/eviware/jars/policy-xmlbeans-1.5.jar"
                     classpathref="xmlbeans-classpath" javasource="1.5">
            <fileset dir="src/xsd/policy"/>
        </ant:xmlbean>

        <ant:mkdir dir="${user.home}/.m2/repository/eviware/policy-xmlbeans/1.5"/>
        <ant:copy todir="${user.home}/.m2/repository/eviware/policy-xmlbeans/1.5"
                  file="${maven.repo.local}/eviware/jars/policy-xmlbeans-1.5.jar"/>

         <j:file name="${user.home}/.m2/repository/eviware/policy-xmlbeans/1.5/policy-xmlbeans-1.5.pom"
                escapeText="false">
            <![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>eviware</groupId>
  <artifactId>policy-xmlbeans</artifactId>
  <version>1.5</version>
</project>]]>
        </j:file>

         <!--
            Create wadl-xmlbeans
        -->

        <ant:xmlbean destfile="${maven.repo.local}/eviware/jars/wadl-xmlbeans-1.0.jar"
                     classpathref="xmlbeans-classpath" javasource="1.5">
            <fileset dir="src/xsd/wadl"/>
        </ant:xmlbean>

        <ant:mkdir dir="${user.home}/.m2/repository/eviware/wadl-xmlbeans/1.0"/>
        <ant:copy todir="${user.home}/.m2/repository/eviware/wadl-xmlbeans/1.0"
                  file="${maven.repo.local}/eviware/jars/wadl-xmlbeans-1.0.jar"/>

         <j:file name="${user.home}/.m2/repository/eviware/wadl-xmlbeans/1.0/wadl-xmlbeans-1.0.pom"
                escapeText="false">
            <![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>eviware</groupId>
  <artifactId>wadl-xmlbeans</artifactId>
  <version>1.0</version>
</project>]]>
        </j:file>

        <!--
            Create soap-xmlbeans
        -->

        <ant:xmlbean destfile="${maven.repo.local}/eviware/jars/soap-xmlbeans-1.2.jar"
                     classpathref="xmlbeans-classpath" javasource="1.5">
            <fileset dir="src/xsd/soap"/>
        </ant:xmlbean>

        <ant:mkdir dir="${user.home}/.m2/repository/eviware/soap-xmlbeans/1.2"/>
        <ant:copy todir="${user.home}/.m2/repository/eviware/soap-xmlbeans/1.2"
                  file="${maven.repo.local}/eviware/jars/soap-xmlbeans-1.2.jar"/>

         <j:file name="${user.home}/.m2/repository/eviware/soap-xmlbeans/1.2/soap-xmlbeans-1.2.pom"
                escapeText="false">
            <![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>eviware</groupId>
  <artifactId>soap-xmlbeans</artifactId>
  <version>1.2</version>
</project>]]>
        </j:file>

         <!--
            Create j2ee-xmlbeans
        -->

        <ant:xmlbean destfile="${maven.repo.local}/eviware/jars/j2ee-xmlbeans-1.4.jar"
                     classpathref="xmlbeans-classpath" javasource="1.5" download="yes">
            <fileset dir="src/xsd/j2ee"/>
        </ant:xmlbean>

        <ant:mkdir dir="${user.home}/.m2/repository/eviware/j2ee-xmlbeans/1.4"/>
        <ant:copy todir="${user.home}/.m2/repository/eviware/j2ee-xmlbeans/1.4"
                  file="${maven.repo.local}/eviware/jars/j2ee-xmlbeans-1.4.jar"/>

         <j:file name="${user.home}/.m2/repository/eviware/j2ee-xmlbeans/1.4/j2ee-xmlbeans-1.4.pom"
                escapeText="false">
            <![CDATA[<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>eviware</groupId>
  <artifactId>j2ee-xmlbeans</artifactId>
  <version>1.4</version>
</project>]]>
        </j:file>

    </goal>

    <!-- sets up the target/standalone directory -->

    <goal name="soapui:create-standalone-binary-dist">
        <ant:delete dir="${maven.build.dir}/standalone"/>
        <ant:mkdir dir="${maven.build.dir}/standalone"/>
        <ant:mkdir dir="${maven.build.dir}/standalone/source"/>
        <ant:mkdir dir="${maven.build.dir}/standalone/jre"/>

        <ant:copy todir="${maven.build.dir}/standalone">
            <ant:fileset dir="${maven.build.dir}/dist"/>
        </ant:copy>

        <util:available file="${maven.build.dir}/standalone/docs/apidocs">
            <ant:move todir="${maven.build.dir}/standalone/apidocs">
                <ant:fileset dir="${maven.build.dir}/standalone/docs/apidocs"/>
            </ant:move>
        </util:available>

        <j:set var="soapuiclasspath" trim="false" value="set CLASSPATH=%SOAPUI_HOME%soapui-${pom.currentVersion}.jar"/>
        <j:forEach var="lib" items="${pom.artifacts}">
            <j:set var="dep" value="${lib.dependency}"/>
            <j:if test="${dep.getProperty('jnlp.jar')=='true' || dep.getProperty('eclipse.jar')=='true'}">
                <j:set var="soapuiclasspath">${soapuiclasspath}
                    set CLASSPATH=%CLASSPATH%;..\lib\${lib.file.name}
                </j:set>
            </j:if>
        </j:forEach>

		<j:set var="soapuiclasspathcompact" trim="false" value="set CLASSPATH=%SOAPUI_HOME%${pom.artifactId}-${pom.currentVersion}.jar;%SOAPUI_HOME%..\lib\*;"/>
		
        <ant:delete>
            <ant:fileset dir="${maven.build.dir}/standalone/bin" includes="*.sh"/>
        </ant:delete>

        <ant:mkdir dir="${maven.build.dir}/standalone/bin_nojre"/>
        <ant:copy todir="${maven.build.dir}/standalone/bin_nojre">
            <ant:fileset dir="${maven.build.dir}/standalone/bin"/>
        </ant:copy>

        <ant:copy todir="${maven.build.dir}/standalone/bin" overwrite="true">
            <ant:fileset dir="src/dist_standalone/bin"/>
            <ant:filterset>
                <ant:filter token="SOAPUICLASSPATH" value="${soapuiclasspath}"/>
                <ant:filter token="SOAPUIVERSION" value="${pom.currentVersion}"/>
                <ant:filter token="SOAPUICLASSPATHCOMPACT" value="${soapuiclasspathcompact}"/>
            </ant:filterset>
        </ant:copy>

        <util:available file="${maven.build.dir}/distributions/${maven.final.name}-src.zip">
            <ant:unzip src="${maven.build.dir}/distributions/${maven.final.name}-src.zip" dest="${maven.build.dir}/standalone/source"/>
        </util:available>

        <ant:copy todir="${maven.build.dir}/standalone/jre">
            <ant:fileset dir="${maven.soapui.standalone.jre}">
                <ant:exclude name="bin/rmid.exe"/>
                <ant:exclude name="bin/rmiregistry.exe"/>
                <ant:exclude name="bin/tnameserv.exe"/>
                <ant:exclude name="bin/kinit.exe"/>
                <ant:exclude name="bin/klist.exe"/>
                <ant:exclude name="bin/ktab.exe"/>
                <ant:exclude name="bin/policytool.exe"/>
                <ant:exclude name="bin/orbd.exe"/>
                <ant:exclude name="bin/servertool.exe"/>

                <ant:exclude name="bin/javaws.exe"/>
                <ant:exclude name="bin/javacpl.exe"/>
                <ant:exclude name="bin/jucheck.exe"/>
                <ant:exclude name="bin/jusched.exe"/>

                <ant:exclude name="bin\wsdetect.dll"/>
                <ant:exclude name="bin\NPJPI*.dll"/>
                <ant:exclude name="bin\NPJava11.dll"/>
                <ant:exclude name="bin\NPJava12.dll"/>
                <ant:exclude name="bin\NPJava13.dll"/>
                <ant:exclude name="bin\NPJava14.dll"/>
                <ant:exclude name="bin\NPJava32.dll"/>
                <ant:exclude name="bin\NPOJI610.dll"/>
                <ant:exclude name="bin\RegUtils.dll"/>
                <ant:exclude name="bin\axbridge.dll"/>
                <ant:exclude name="bin\deploy.dll"/>
                <ant:exclude name="bin\jpicom.dll"/>
                <ant:exclude name="bin\javacpl.cpl"/>
                <ant:exclude name="bin\jpiexp.dll"/>
                <ant:exclude name="bin\jpinscp.dll"/>
                <ant:exclude name="bin\jpioji.dll"/>
                <ant:exclude name="bin\jpishare.dll"/>
                <ant:exclude name="lib\deploy.jar"/>
                <ant:exclude name="lib\plugin.jar"/>
                <ant:exclude name="lib\javaws.jar"/>
                <ant:exclude name="lib\javaws\messages.properties"/>
                <ant:exclude name="lib\javaws\messages_de.properties"/>
                <ant:exclude name="lib\javaws\messages_es.properties"/>
                <ant:exclude name="lib\javaws\messages_fr.properties"/>
                <ant:exclude name="lib\javaws\messages_it.properties"/>
                <ant:exclude name="lib\javaws\messages_ja.properties"/>
                <ant:exclude name="lib\javaws\messages_ko.properties"/>
                <ant:exclude name="lib\javaws\messages_sv.properties"/>
                <ant:exclude name="lib\javaws\messages_zh_CN.properties"/>
                <ant:exclude name="lib\javaws\messages_zh_HK.properties"/>
                <ant:exclude name="lib\javaws\messages_zh_TW.properties"/>
                <ant:exclude name="lib\javaws\miniSplash.jpg"/>
            </ant:fileset>
        </ant:copy>

        <!-- create standalone zip for win32 -->
        <ant:zip destfile="${maven.build.dir}/distributions/soapui-${pom.currentVersion}-win32-standalone-bin.zip">
            <ant:zipfileset dir="${maven.build.dir}/standalone" prefix="soapui-${pom.currentVersion}" includes="*.*"/>
            <ant:zipfileset dir="${maven.build.dir}/standalone/bin" prefix="soapui-${pom.currentVersion}/bin"/>
            <ant:zipfileset dir="${maven.build.dir}/standalone/source" prefix="soapui-${pom.currentVersion}/source"/>
            <ant:zipfileset dir="${maven.build.dir}/standalone/licenses" prefix="soapui-${pom.currentVersion}/licenses"/>
            <!--    		  <ant:zipfileset dir="${maven.build.dir}/standalone/docs" prefix="soapui-${pom.currentVersion}/docs"/>  -->
            <ant:zipfileset dir="${maven.build.dir}/standalone/jre" prefix="soapui-${pom.currentVersion}/jre"/>
            <ant:zipfileset dir="${maven.build.dir}/standalone/lib" prefix="soapui-${pom.currentVersion}/lib"/>
        </ant:zip>
    </goal>

    <!-- builds installer -->
    <goal name="soapui:make-installer">

        <util:available file="${maven.build.dir}/standalone">
            <j:set var="standaloneExists" value="true"/>
        </util:available>

        <j:if test="${!standaloneExists}">
            <attainGoal name="soapui:create-standalone-binary-dist"/>
        </j:if>

        <!-- create temporary copy of nsis script with expanded variables -->
        <ant:mkdir dir="${maven.build.dir}/nsis"/>
        <ant:copy todir="${maven.build.dir}/nsis" overwrite="true">
            <ant:fileset dir="src/nsis">
                <ant:include name="*.nsi"/>
            </ant:fileset>
            <ant:filterset>
                <ant:filter token="SOAPUIVERSION" value="${pom.currentVersion}"/>
            </ant:filterset>
        </ant:copy>

        <ant:copy todir="${maven.build.dir}/nsis" overwrite="true">
            <ant:fileset dir="src/nsis">
                <ant:exclude name="*.nsi"/>
            </ant:fileset>
        </ant:copy>

        <ant:exec dir="." executable="${maven.soapui.nsis.home}\makensis.exe">
            <ant:arg value="${maven.build.dir}\nsis\Install soapui Standalone.nsi"/>
        </ant:exec>
    </goal>

    <!-- compiles and runs soapui -->

    <goal name="soapui:compile-and-run">
        <attainGoal name="jar"/>
        <ant:java fork="true" failonerror="true" classname="com.eviware.soapui.SoapUI">
            <ant:classpath>
                <ant:path location="${maven.build.dir}/classes"/>
                <ant:path refid="maven.dependency.classpath"/>
            </ant:classpath>
        </ant:java>
    </goal>

    <!-- publishes the docs and distributions directories -->

    <goal name="soapui:publish">
        <j:set var="dist" value="${maven.soapui.publish.dist}"/>
        <j:set var="site" value="${maven.soapui.publish.site}"/>
        <j:set var="plugins" value="${maven.soapui.publish.plugins}"/>

        <j:if test="${!empty(dist)}">
            <echo>Publishing distributions to ${dist}</echo>
            <ant:mkdir dir="${dist}"/>
            <ant:copy todir="${dist}" overwrite="true">
                <ant:fileset dir="${maven.build.dir}/distributions"/>
            </ant:copy>
        </j:if>

        <j:if test="${!empty(site)}">
            <echo>Publishing docs to ${site}</echo>
            <ant:mkdir dir="${site}"/>
            <ant:copy todir="${site}" overwrite="true">
                <ant:fileset dir="${maven.build.dir}/docs"/>
            </ant:copy>
        </j:if>

        <j:if test="${!empty(plugins)}">
            <echo>Publishing plugins to ${plugins}</echo>
            <ant:mkdir dir="${plugins}"/>
            <ant:copy todir="${plugins}" overwrite="true">
                <ant:fileset dir="${maven.build.dir}/docs/repository/eviware/plugins"/>
            </ant:copy>
        </j:if>

    </goal>

    <goal name="soapui:ftp-publish">
        <j:set var="source" value="${maven.soapui.ftp.source}"/>

        <j:if test="${!empty(source)}">
            <echo>ftp:ing!</echo>
            <taskdef name="ftp" classname="org.apache.tools.ant.taskdefs.optional.net.FTP"/>

            <ant:ftp server="${maven.soapui.ftp.host}" port="${maven.soapui.ftp.port}" verbose="yes"
                     userid="${maven.soapui.ftp.username}" password="${maven.soapui.ftp.password}">
                <ant:fileset dir="${source}"/>
            </ant:ftp>
        </j:if>

    </goal>
</project>

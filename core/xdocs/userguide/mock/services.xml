<?xml version="1.0"?>
<document>
    <properties>
        <title>Generate Web Service simulation from WSDL - Mock Services</title>
    </properties>
    <body>
		<section name="Mock Web Services">
		<p>MockServices are displayed in the navigator under their containing project node. They can be 
		created in a number of ways;</p>
		<ol>
		<li>From the Project popup menu with the "New MockService" action. Creates an empty MockService with no operations.</li>
		<li>From an existing request by selecting the "Create MockResponse" toolbar button which will prompt for which 
		MockService to add the selected requests operation and current response as a MockResponse.</li>
		<li>From the Interface popup menu with the "Generate MockService" action. This will prompt as follows:
		<p align="center"><img src="images/generatemockservice.gif" alt="Generate Web Service simulation from WSDL"/></p>
		<p>After specifying a path and port to listen on, soapUI will create a MockService with a MockOperation 
		corresponding to each of the specified interfaces operation. Each MockOperation will further be configured with 
		a default MockResponse which will be created from the associated WSDL and Schema definition in the same manner as when
		importing interfaces and creating requests.</p>
		</li>
		</ol>
		<p>Once created, an arbitrary number of MockOperations can be added to a MockService, there is no requirement
		that all operations come from the same interface or that all operations from an interface be mocked. Just
		mock those operations that are required.</p>
		
		<subsection name="MockService Actions">
		<columns>
		<column><div>Right-clicking a MockService node in the navigator shows a popup menu
		with the following actions:</div>
		<ul>
		<li><b>Show MockService Editor</b> - opens the MockService Editor, see below</li>
		<li><b>Start Minimized</b> - opens/minimizes the MockService editor and starts the MockService</li>
		<li><b>Stop</b> - stops the MockService</li>
		<li><b>New MockOperation</b> - prompts to create a new MockOperation in the MockService</li>
		<li><b>Clone MockService</b> - clones the entire MockService</li>
		<li><b>Add Endpoint to Interface</b> - prompts to add this MockServices local endpoint to an Interface in the same project. The 
		endpoint will be automatically updated if it changed in the MockService Editor.</li>
		<li><b>Rename</b> - prompts to rename the MockService</li>
		<li><b>Remove</b> - prompts to remove the MockService</li>
		<li><b>Online Help</b> - displays this page in an external browser</li>
		</ul>
		</column></columns>
		</subsection>
		<subsection name="MockService Details Tab">
			The bottom left details tab for a MockService displays the following properties:
			<ul>
				<li><b>Name</b> : the name of the MockService</li>
				<li><b>Description</b> : an arbitrary description of the MockService, displayed as a tooltip over the 
				   MockServices' node in the Navigator.</li>
				<li><b>Path</b> - the path this MockService listens on (read only)</li>
				<li><b>Port</b> - the port this MockService listens on (read only)</li>
				<li><b>Match SOAP Version</b> - controls if incoming requests must match the SOAP Version of 
				a corresponding MockOperation in a MockService.</li>
				<li><b>Require SOAP Action</b> - controls if incoming requests SOAPAction must match the SOAPAction of 
				a corresponding MockOperation in a MockService.</li>
				<li><b>Dispache Response</b> : enables dispatching of request containing a Response Message instead
                    of a request.</li>
				<li><b>Incoming WSS</b> - the Incoming WSS configuration to use for decrypting incoming requests. This is 
				necessary if the entire body of a message is encrypted since it can not be dispatched otherwise.</li>
				<li><b>Default Outgoing WSS</b> - the default Outgoing WSS configuration to apply to all MockResponses.
				Can be over ridden on the MockResponse level.</li>
			</ul>
			<p>The Test Properties tab contains the custom properties defined for this MockService</p>
		</subsection>
		
		<subsection name="The MockService Editor">
		<columns>
		<column><div>Double-clicking a MockService in the navigator opens the MockService editor as seen to the right.
		From the top down the editor has the following parts:</div>
		<p>A Toolbar with the following options:
		<ul>
		<li><b>Run</b> - Starts the MockService on the configured path/port and 
		waits for requests (see below)</li>
		<li><b>Stop</b> - Stops a running MockService</li>
		<li><b>Open Interface</b> - Opens an HTML page with links to the currently published WSDL and its parts (see below)</li>
		<li><b>Options</b> - Opens the MockService Options dialog (see below)</li>
		<li><b>Help</b> - Opens this page in a browser</li>
		</ul>
		</p>
		
		<p>The list of MockOperations currently configured for this MockService. Right-clicking
		show the MockOperations available actions, double-clicking opens the MockOperation 
		editor</p>
		<p>A rolling log of handled requests with a toolbar with the following options:
		<ul>
		<li><b>Enable</b> - Enables the MockService log</li>
		<li><b>Clear</b> - Clears all entries from the log</li>
		<li><b>Options</b> - Prompts for the maximum number of entries to hold in the log. Keep this low as an
		entry can take up a fair amount of memory (depending on message size, attachments, etc..)</li>
		</ul>
		</p>
		<p>Double-clicking on an entry in the log displays the entire message exhange for that
		request as shown below:</p>
		</column>
		<column><img src="images/mockserviceeditor.gif" alt="Editor For Web Servie simulation"/></column>
		</columns>
		<p align="center"><img src="images/mockrequestmessageviewer.gif" alt="Viewing a mocked Web Service response"/></p>
		
		</subsection>
		
		<subsection name="MockService Inspectors">
		<p>Below the list of MockOperations there are 4 inspectors available (left to right):</p>
		<ul>
		<li>Description : allows you to enter an arbitrary description for the MockService</li>
		<li>Properties : manages custom properties for the MockService</li>
		<li>Start Script : specifies a Groovy Script that should be run when starting the MockService, useful
		for initializations, etc...</li>
		<li>Stop Script : specifies a Groovy Script to be run when stopping the MockService, useful for 
		cleanup, closing connections, etc..</li>
		</ul>
		</subsection>
		
		<subsection name="MockService Options">
		<p>The MockService Options dialog has the following options:</p>
		<ul>
		<li>Path - the local path to mount on</li>		
		<li>Port - the port to listen on</li>
		<li>Host - the external IP of the local machine (used for WSDL Publishing)</li>
		<li>Host Only - only bind to host IP instead of all IP's</li>
		<li>Docroot - path to a local folder that should be used to serve files for GET requests to the MockService
        path</li>
		<li>Fault Operation - MockOperation to dispatch to if a SOAP Fault message is received by the MockService</li>
		</ul>
		<p align="center"><img src="images/mockservice_options.gif" alt="Setting options for a MoackService"/></p>
		</subsection>
		
		<subsection name="MockService execution">
		<p>When starting the MockService using the Run toolbar button, soapUI starts a local
		http server (if not already running for another MockService) as configured in the MockService Options dialog. 
		This can be seen in the soapUI-log as follows:</p>
		<p align="center"><img src="images/mockservice_log.gif" alt="Log form a Mocked Web Service"/></p>
		<p>SOAP Requests can now be issued to the server from any client as if it were a "real" Web Service, the incoming
		requests will be dispatched to the matching MockService / MockOperation which will further dispatch
		as configured in <a href="operations.html#Request_Dispatching">Request Dispatching</a>. While
		the MockService is running, it is still possible to add/remove MockOperations, MockResponses, etc... 
		The only values that can not be changed are the path and port of the MockService, for this it 
		is required to first stop the MockService and then start it again after changing as desired.</p>
		<p>If an error occurs during request processing a SOAP Fault will be returned, for example in the following situation
		a request was issued from within soapUI that could not be matched to any available MockServices 
		MockOperation:</p>
		<p align="center"><img src="images/mockresponse_fault.gif" alt="soapfault created from a WSDL"/></p>
		</subsection>
		
		<subsection name="WSDL Publishing">
		<p>When starting a MockService, the corresponding WSDL's and their referenced parts (WSDLs and XSDs) are made available
		via a local web interface. All includes/imports are rewritten to references the correct files, and the service port is
		changed to the one of the MockService.</p>
		<p>The root page of the MockEngine displays a list of running MockServices:</p>
		<p align="center"><img src="images/wsdlpublish_1.gif"/></p>
		<p>Selecting a MockService displays the Interfaces mocked by it:</p>
		<p align="center"><img src="images/wsdlpublish_2.gif"/></p>
		<p>Selecting an interface displays the list of parts in the Interface:</p>
		<p align="center"><img src="images/wsdlpublish_3.gif"/></p>
		<p>... and selecting a part displays it in your browser:</p>
		<p align="center"><img src="images/wsdlpublish_4.gif"/></p>
		<p>The root WSDL part (displayed first in the list of parts) can be used to generate clients, etc..</p>
            <p>As of soapUI 2.5, it is possible to call the MockService path with "?WSDL" which will return the
            mocked WSDL directly. If multiple WSDLs are being mocked, soapUI automatically creates a WSDL that
            imports these WSDLs instead.</p>
		</subsection>

		 <p><hr size="1"/>Next: <a href="coverage.html">MockService Coverage</a></p>
		</section>
    </body>
</document>

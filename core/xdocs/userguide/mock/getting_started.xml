<?xml version="1.0"?>
<document>
    <properties>
        <title>Web Service Simulation, Mocking -  soapUI</title>
    </properties>
    <body>
		<section name="Getting Started with Web Service Mocking">
		<p>In soapUI 1.7 we introduced the possibility to create mock implementations of operations and entire services with 
		a combination of static response messages combined with Groovy scripts, attachments and custom http headers.
		This opens for a number of usage scenarios, including:</p>
		<ul>
			<li>Rapid Web Services Prototyping; generate a complete static mock implementation from a WSDL in seconds 
			and add dynamic functionality using Groovy.</li>
			<li>Client testing/development; create mock implementations of desired operations and set up a number of 
			alternative responses (including scripts, attachments and custom http headers). Clients can be developed and tested without 
			access to the "live" services. Responses can be cycled, randomized or selected with XPath expression from 
			incoming request</li>
			<li>Test Driven Development; Create soapUI TestSuites and TestCases against MockServices before or during the actual
			services being implemented</li>
			<li>etc...</li>
		</ul>
		
		
						
				<table class="relatedInfo" cellspacing="0" cellpadding="0">
	<tr class="a">
    	<td width="75" style="padding-top:5px">
        	<img src="../../images/where_do_i_start.jpg" alt="Start soapUI Testing" longdesc="http://www.soapui.org"></img>
        </td>
        <td>
            <table class="relatedInner">
              <tr>
                <td>
                	<span class="relatedInfoHeader">Did you know?</span>
                </td>
              </tr>
              <tr>
                <td>
                    <div>
						<p>In soapUI Pro you have two more request and response editors; The Form editor and the Outline Editor.<br/>
						Both will improve your productivity and make Web Service Testing more fun.
						</p>
						<p>
						<b><i>soapUI Pro</i></b> contains productivity enhancements as well as offers Professional World Class support. contains productivity enhancements as well as offers Professional World Class support.
						</p>
                    </div>
                </td>
              </tr>
              <tr align="right">
              	<td>
                	<span class="relatedLinks"><a href="http://www.eviware.com/component/option,com_wrapper/Itemid,41/" title="try soapUI Pro" onclick="javascript:urchinTracker:('/downloadTrial');">
                                               <img src="../../images/try_pro_100.png" alt="Try soapUI pro to soap test" width="101" height="20" longdesc="http://www.eviware.com"/></a></span>
                </td>
              </tr>
            </table>
		</td>
	</tr>
</table>
		
		

		<p>In the following example we will create a mock implementation of an existing service, tailor the mock response with some
		Groovy and call the mock service from within soapUI. Start by creating a new project for the publicly available CurrencyConverter
		at http://www.webservicex.net/CurrencyConvertor.asmx?WSDL</p>
		
		<p align="center"><img src="../../gettingstarted/images/mockservice_1.gif" alt="New Web Service Project"/></p>
		
		<subsection name="Create a MockService">
		
		<p>After importing, you should get an interface with one operation and request. Right-click the interface and select the 
		"Generate MockService" menu option:</p>
		
		<p align="center"><img src="../../gettingstarted/images/mockservice_2.gif"  alt="Generate a Web Service simulation from WSDL"/></p>
		
		<p>This opens the following dialog which lets you specify the local port/path for the create service (can of course be 
		changed later..);</p>
		
		<p align="center"><img src="../../gettingstarted/images/mockservice_3.gif"  alt="Genererate a Mock Web Service"/></p>
		
		<p>Just leave the suggested values, for this and coming dialogs.. When the MockService has been created, you will get
		a new tree hierarchy similar to the the initial Interface, but with grayed icons... The MockService contains a MockOperation 
		corresponding to the operation in the original interface and soapUI has also created one MockResponse for this operation from
		its schema... Double click both the MockService and "Response 1" tree nodes to open their corresponding editors, after some
		moving or resizing around you should be able to arrive at the following: </p>
		
		<p align="center"><img src="../../gettingstarted/images/mockservice_4.gif"  alt="Editing a Web Service Mock Response"/></p>
		
		<p>The MockService editor (top left) contains a toolbar, a list of all operations for the service and a request/response log
		which logs all incoming requests that have been handled by the MockService.</p>
		<p>The MockResponse editor is very similar to the standard soapUI Request editor (which can/will be confusing at first ;-), only
		the "focus" has been shifted to the response-tabs of the editor, since this is where the editing of the mock response will be 
		done. The "Incoming Request" tab/view shows the last received request to the operation (useful for debugging client calls), 
		including attachments and http-headers.</p>
		
		</subsection>
		
		<subsection name="Invoke the MockService from within soapUI">
		
		<p>In the screen above you can see the default response that has been generated by soapUI from the schema. Lets continue by 
		just invoking this mock operation from within soapUI:</p>
		<ol>
		<li>Click the green arrow button in the MockService editor... this will start the service on the configured port/path which can
		also be seen in the log (this has already been done in the screenshot above..)</li>
		<li>In the MockResponse editor, select the left-most button in the toolbar, which will prompt to open one of the existing requests
		for the corresponding operation in your project. When opening the request, soapUI will automatically change its endpoint to
		the endpoint of the now locally running MockService</li>
		<li>Submit the opened request! If all goes well you should get the previously create MockResponse in the request editors response window:</li>
		</ol>
		
		<p align="center"><img src="../../gettingstarted/images/mockservice_5.gif"  alt="Web Service Invocation"/></p>
		
		<p>Switching back to the MockResponse editor and selecting its "Incoming Request" tab/view, you should be able to see the request
		that was posted to the MockService and handled by the corresponding MockOperation:</p>
		
		<p align="center"><img src="../../gettingstarted/images/mockservice_6.gif"  alt="Response for soapUI Web Service Mock Response"/></p>
		
		<p>Congratulations! Hopefully all went well and you now have your first MockService up and running... Feel free to modify the 
		created MockResponse content and resubmitting the request to see that your changes are instantly available (no need to restart
		the MockService)</p>
		
		</subsection>
		<subsection name="Customize the MockResponse">
		
		<p>Let's continue by making the created mock response a bit more dynamic with a Groovy script. Switch to the "Response Script" tab
		in the MockResponse editor and enter the following:</p>
		
		<p align="center"><img src="../../gettingstarted/images/mockservice_7.gif"  alt="Web Service Mock Response Scripting"/></p>
		
		<p>Go back to the Mock Response tab and change the response body to</p>
		
		<p align="center"><img src="../../gettingstarted/images/mockservice_8.gif"  alt="Web Service Mock Response Parameter"/></p>
		
		<p>Now, when submitting a request to this MockResponse, the script will be evaluated and the generated rate value will be inserted
		into the outgoing response message;</p>
		
		<p align="center"><img src="../../gettingstarted/images/mockservice_9.gif" alt="Web Service Mock Response Expansion"/></p>
		
		<p>OK... this should get you started with your first mock service... now you can continue with:</p>
		<ul>
		<li>Adding some more responses to the MockOperation (via its right-button menu). Change the dispatch method through the 
		MockOperation Options dialog</li>
		<li>Add more dynamic script behavior (database or file access, input processing, etc...), attachments, custom response http headers, etc...</li>
		<li>Generate a web service client with one of soapUI's tool integrations and call your MockService from there to see what
		message the client actually sends (and that it handles your response correctly)</li>
		<li>etc...</li>
		</ul>
	
		</subsection>
		
		 <p><hr size="1"/>Next: <a href="services.html">Mock Web Services</a></p>
		</section>
    </body>
</document>

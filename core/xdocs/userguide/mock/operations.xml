<?xml version="1.0"?>
<document>
    <properties>
        <title>Web Service Mocking - Mock operations</title>
    </properties>
    <body>
		<section name="Web Service Mock Operations">
		<p>A MockOperation is a simulation of an operation in one of the current projects interfaces and
		will dispatch incoming requests if they match the operations SOAP Action and arguments. A 
		MockOperation contains a variable number of MockResponses that contain actual response messages
		to be returned to a caller. Dispatching of requests to a specific
		MockResponse can be done in a number of ways as described below.</p>
	
		<subsection name="MockOperation Actions">
		<columns>
		<column><div>Right clicking a MockOperation node in the navigator or MockService editor shows a popup menu
		with the following actions:</div>
		<ul>
		<li><b>Open MockOperation Editor</b> - opens the MockOperation Editor, see below</li>
		<li><b>Open Request</b> - prompts to open an existing request for the operation being mocked with 
		the endpoint set to the MockServices endpoint. This is the preferred way of quickly testing a 
		MockService from within soapUI after the MockService has been started.</li>
		<li><b>New MockResponse</b> - prompts to add a new MockResponse to the MockOperation</li>
		<li><b>Change Operation</b> - prompts to change the Interface Operation mocked by this MockOperation (see below)</li>
		<li><b>Rename</b> - prompts to rename the MockOperation</li>
		<li><b>Remove</b> - prompts to remove the MockOperation</li>
		<li><b>Online Help</b> - displays this page in an external browser</li>
		</ul>
		</column></columns>
		</subsection>
		<subsection name="MockOperation Details Tab">
			The bottom left details tab for a MockOperation displays the following properties:
			<ul>
				<li><b>Name</b> : the name of the MockOperation</li>
				<li><b>Description</b> : an arbitrary description of the MockOperation, displayed as a tool tip over the 
				MockOperations' node in the Navigator.</li>
				<li><b>WSDL Operation</b> - shows which Interface Operation that is being mocked</li>
				<li><b>Dispatch Style</b> - shows how incoming requests to this MockOperation are dispatched.</li>
			</ul>
		</subsection>
		
		<subsection name="Change Operation">
		<p>This action prompts to change the Operation mocked by this MockOperation with the following dialog:</p>
		<p align="center"><img src="images/changemockoperation.gif"></img></p>
		<p>The dialog options are as follows:</p>
		<ul>
		<li><b>Name</b> - changes the name of the MockOperation</li>
		<li><b>Interface</b> - the interface containing the operation to be mocked</li>
		<li><b>Operation</b> - the operation to be mocked</li>
		<li><b>Recreate Responses</b> - recreates all MockResponses contained in the MockOperation from the new operations schema.</li>
		<li><b>Create Optional</b> - creates optional content when recreating responses</li>
		<li><b>Keep Existing</b> - tries to keep existing element/attribute values when recreating responses (will only work for
		elements/attributes with same namespace/position in document</li>
		</ul>
		</subsection>
		
		<subsection name="The MockOperation Editor">
		<p>Double-clicking a MockOperation in the navigator opens the MockOperation editor as
		 seen below. From the top down the editor has the following parts:</p>
		<p>A Toolbar with the following options:
		<ul>
		<li><b>Add MockResponse</b> - Prompts to add a new MockResponse to the MockOperation</li>
		<li><b>Open Request</b> - prompts to open an existing request for the operation being mocked as described above</li>
		<li><b>interface</b> - The Interface containing the operation to be mocked</li>
		<li><b>Operation</b> - The operation to be mocked</li>
		<li><b>Help</b> - Opens this page in a browser</li>
		</ul>
		</p>
		<p>The list of MockResponse currently configured for this MockOperation. Right-clicking
		show the MockResponses' available actions, double clicking opens the MockResponse 
		editor</p>
		<p>A Dispatch Toolbar and configuration are below whose content depends on the selected 
		dispatch style (see below)</p>
		<p align="center"><img src="images/mockoperationeditor.gif" alt="Change MockOperation"/></p>
		
		</subsection>
		<subsection name="Request Dispatching">
		<p>Incoming requests to a MockOperation can be dispatched in one of 4 ways using the 
		dispatch combo box:</p>
		<ul>
		<li><b>SEQUENCE</b> - dispatches to the configured responses in sequence, starting from the beginning
		when the last has been reached.</li>
		<li><b>RANDOM</b> - dispatches randomly between existing MockResponses</li>
		<li><b>XPATH</b> - dispatches based on a specified XPath expression that will be used to select the name
		of the MockResponse step to dispatch to.</li>
		<li><b>SCRIPT</b> - allows a Groovy script for dispatching based on any arbitrary criteria</li>
        <li><b>QUERY_MATCH</b> - specifies a number of matching queries for the request and their target MockResponse (see below)</li>
		</ul>
		<p>Both the XPath and Script dispatch methods allow specification of a default response to be returned
		if there is no matching response for the XPath or script expression. When selecting XPath or Script, 
		a corresponding editor is shown below the dispatch toolbar where the XPath expression or Groovy script 
		can be entered and tested. When running soapUI Pro, the XPath editor also includes a button for the
		<a href="../xpath_selector.html">XPath Selector</a>.</p>
		</subsection>
            
        <subsection name="Query-Match Dispatching">
        <p>The QUERY_MATCH dispatch option has the following configuration panel:</p>    
        <p align="center"><img src="images/querymatch-dispatch-config.gif"></img></p>
            <p>The list to the left contains a list of queries with a toolbar for adding/removing/etc these.
                Selecting a query item in the list enables the detail view to the right for the query which
            contains the following fields:</p>
            <ul>
                <li>XPath : the XPath expression to apply to a request to this MockOperation</li>
                <li>Expected value : the value to check for</li>
                <li>Dispatch To : the MockResponse to dispatch to if the expected value matches that selected from the request</li>
                <li>Disabled : option to disable the item</li>
            </ul>

            <p>The toolbar on top of the Detail area has the following buttons:</p>'
            <ul>
                <li>Define Namespaces : create namespace declarations from the last received request</li>
                <li>Extract : applies the defined XPath expression to the last request and saves the extracted value
                to the Expected Value field</li>
                <li>Select... : Opens the soapUI Pro XPath Selector for the last request and writes the selected
                nodes' XPath to the XPath field</li>
            </ul>
        </subsection>

		<subsection name="Groovy Script Dispatching">
		<p>Using Groovy scripts as a controller to dispatch incoming is a very flexible way of creating
		MockOperations. The script has access to the following variables:</p>
		<p>The script has access to the following objects:</p>
		<ul>
		<li><code>log</code> - a standard log4j Logger for logging arbitrary information to the Groovy log</li>
		<li><code>context</code> - an instance of 
		<a target="_new" href="http://www.soapui.org/apidocs/index.html?com/eviware/soapui/model/mock/MockRunContext.html">MockRunContext</a>
		that can hold dynamically user-defined properties. The context is service scoped, i.e. shared between
		all MockOperations/MockResponses for a MockService during its lifetime. Since this object implements the <code>Map</code> interface
		it can be accessed using Groovy’s built-in collection support (see example screenshot above)</li>
		<li><code>requestContext</code> - an instance of 
		<a target="_new" href="http://www.soapui.org/apidocs/index.html?com/eviware/soapui/model/mock/MockRunContext.html">MockRunContext</a>
		that can hold dynamically user-defined properties. The context is request scoped, i.e. is only available during this
		request and not shared with other MockOperations. Use this to pass values from the dispatch script to the handling
		MockResponse. Since this object implements the <code>Map</code> interface
		it can be accessed using Groovy’s built-in collection support (see example screenshot above)</li>
		<li><code>MockRequest</code> - an instance of
		<a target="_new" href="http://www.soapui.org/apidocs/index.html?com/eviware/soapui/impl/wsdl/mock/WsdlMockRequest.html">WsdlMockRequest</a>
		which provides access to request-related objects, including the underlying HttpServletRequest/HttpServletResponse objects</li>
		<li><code>MockOperation</code> - an instance of
		<a target="_new" href="http://www.soapui.org/apidocs/index.html?com/eviware/soapui/impl/wsdl/mock/WsdlMockOperation.html">WsdlMockOperation</a>
		which provides access to the current MockOperation object</li>
		</ul>		
		
		<p>The script must return the name of the MockResponse to dispatch to, i.e. the script shown in the
		screenshot above always dispatches to a MockResponse named "Response 1"</p>
		
		</subsection>
		

		 <p><hr size="1"/>Next: <a href="responses.html">Mock Responsese</a></p>
		</section>
    </body>
</document>


<?xml version="1.0"?>
<document>
    <properties>
        <title>Web Service Load Test configuration</title>
    </properties>
    <body>
    	<section name="LoadTest Configuration">
    	<p>The actual execution of a LoadTest is configured in two dimensions:</p>
    	<ul>
    	<li>The <a href="#LoadTest_Limit">LoadTest Limit</a> controls how long a LoadTest should run</li>
    	<li>The <a href="#LoadTest_Strategies">LoadTest Strategies</a> control how TestCases are scheduled 
    	and threaded (i.e. run in parallel)</li>
    	</ul>
    
    	<subsection name="LoadTest Limit">
		<p><img src="images/loadtest_limit.gif" alt="Load Test Limit Configuration"/></p>
		<p> The LoadTest Limit is specified on the top right of the LoadTest Editor and consists of two settings: 
		</p>
		<ul>
			<li><b>Limit</b> : specifies for how many TestCase runs or seconds the LoadTest should run</li>
			<li><b>Limit Type</b> : specifies how to limit the LoadTest; <b>Seconds</b> will run the LoadTest for
			the specified time, <b>Total Runs</b> will run the underlying TestCase for the specified number of times in total.</li>
		</ul>
		<p>Please note that the "Total Runs" Limit Type does <b>not</b> mean per thread but in total; if for example setting the Limit to
		1000 and configuring 5 threads, each thread will run approximately 200 requests (depending on execution times...).</p>
		<p>Setting the Limit to 0 with either Limit Types will run the LoadTest indefinitely. A progress bar to the
		right of the settings will show the current LoadTest progress.</p>
		</subsection>
		
		<subsection name="LoadTest Strategies">
		<p>A LoadTest can in soapUI be run using a number of strategies for how TestCases are executed. All strategies
		have a thread-count allowing the specification of how many TestCases that should be run in parallel.
		The current strategy is selected using the available Strategy combo, which will show that strategies settings
		to its right. Some strategies allow interactive changing of the thread count while executing the LoadTest, others
		don't.</p>
		
		<p>The following LoadTest Strategies are currently available:</p> 
		<ul>
		<li><a href="#LoadTest_Simple_Strategy"><b>Simple</b></a> : TestCase execution with a configurable delay</li>
		<li><a href="#LoadTest_Variance_Strategy"><b>Variance</b></a> : TestCase execution varying the number of threads over time</li>
		<li><a href="#LoadTest_Burst_Strategy"><b>Burst</b></a> : TestCase execution in "bursts"</li>
		<li><a href="#LoadTest_Thread_Strategy"><b>Thread</b></a> : TestCase execution with a fixed thread count modification</li>
        <li><a href="#LoadTest_Grid_Strategy"><b>Grid</b></a> : Defines a custom variation of thread count (soapUI Pro only)</li>
        <li><a href="#LoadTest_Script_Strategy"><b>Script</b></a> : Lets a groovy script control the number of threads (soapUI Pro only)</li>
		</ul>

		<p>Since multiple LoadTests with different strategies can be created one could for example create one LoadTest with
		a simple "base" load using the Simple strategy and another LoadTest using the Burst strategy to monitor how base
		performance is affected when running both LoadTests simultaneously within soapUI or from the command-line.</p>
		
		<h3>LoadTest Simple Strategy</h3>
		<p>The Simple Strategy has the following settings: <img align="bottom" src="images/loadtest_simple_strategy.gif" alt="Load Test Simple Strategy Configuration"/></p>
		<ul>
			<li><b>Test Delay</b> : sets a delay between each TestCase run</li>
			<li><b>Random</b> : sets how much of the delay to randomize</li>
		</ul>
		<p>
		Use this for simple load testing. For example setting the delay/random to 
		1000/0.5 will delay each threads TestCase execution by 500 to 1000 ms. Setting the delay
		to 0 will ignore the random setting and run without any delays.</p>
		<p>
		If setting a delay be aware that the TPS statistic will give misleading results unless the
		"Calculate TPS on actual time passed" option is selected in the LoadTest Options dialog</p>

		<h3>LoadTest Variance Strategy</h3>
		<p>The variance strategy has the following settings:  <img src="images/loadtest_variance_strategy.gif" alt="Load Test Variance Strategy Configuration"/></p>
		<ul>
			<li><b>Interval</b> : sets the duration of each variance cycle in seconds</li>
			<li><b>Variance</b> : sets how much the thread-count should be varied during the cycle</li>
		</ul>
		<p>
		Use this strategy for simulating a linearly varying number of threads over time. The strategy will start
		at the currently configured thread-count, increase to current + (current*variance), decrease to
		current - (current*variance) and increase back to the current thread-count.</p>
		<p>For example setting the thread-count to 20, duration to 480 and variance to 0.5, the strategy will 
		increase from 20 to 30 threads in the first 2 minutes, decrease to 10 threads of the next 4 minutes and 
		then increase back to the original 20 in the last 2 minutes.</p>
		
		<h3>LoadTest Burst Strategy</h3>
		<p>The Burst strategy has the following settings: <img src="images/loadtest_burst_strategy.gif" alt="Load Test Burst Strategy Configuration"/></p>
		<ul>
			<li><b>Burst Delay</b> : sets the delay between each burst</li>
			<li><b>Burst Duration</b> : sets duration for each burst</li>
		</ul>
		<p>
		Use this strategy to simulate a "burst" load and for example monitor system behaviour during the "recovery"
		periods</p>
		<p>For example setting the limit type to seconds, and limit 
		to 600, the thread-count to 30, burst delay to 50, and burst duration to 10 will pause all 30 threads 
		for 50 seconds	and run them for 10 seconds repeatedly under 10 minutes.</p>
			
		<h3>LoadTest Thread Strategy</h3>
		<p>The Threads Strategy has the following settings: <img src="images/loadtest_thread_strategy.gif" alt="Load Test Thread Strategy Configuration"/></p>
		<ul>
			<li><b>Start Threads</b> : sets the number of threads to start at</li>
			<li><b>End Threads</b> : sets the number of threads to end at</li>
		</ul>
		<p>Use this strategy to vary the number of threads from a start to end value linearly during the entire
		LoadTest. This can for example be useful to find the thread-count at which the best TPS is achieved.</p>
		<p>For example setting the limit type to seconds, and limit 
		to 600, the start threads to 1, and end threads to 30 will increase the number of threads from 1 to 30 over
		10 minutes.</p>


        	<h3>LoadTest Grid Strategy</h3>
		<p>The Grid Strategy has the configuration dialog:</p>
            <p align="center"><img src="images/loadtest_grid_strategy.gif" alt="Load Test Grid Strategy Configuration"/></p>

		<p>Each row in the grid configures the number of threads after the elapsed time since the previous row. In the above
        example the number of threads will change to 8 after 10 seconds, then to 12 after another 10 seconds, etc. Both
        Elapsed Time and ThreadCount are stored relatively to the current ThreadCount and limit, so if these are changed the
        grid values will be recalculated accordingly.</p>

        	<h3>LoadTest Script Strategy</h3>
			<p>The Script Strategy has the configuration dialog:</p>
            <p align="center"><img src="images/loadtest_script_strategy.gif" alt="Load Test Script Strategy Configuration"/></p>

		<p>Here you create a script that should return the number of threads the TestCase should use. The script is called
            at the interval specified in the LoadTest Options dialog. The above example would set a random number of threads between 1 and 11 each time it is called.</p>
		</subsection>
		
		<p><hr size="1"/>Next: <a href="execution.html"> Web Service Load Testing Execution</a></p>
		
		</section>
    </body>
</document>


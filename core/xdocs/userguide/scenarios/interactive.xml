<?xml version="1.0"?>
<document>
    <properties>
        <title>Interactive SOAP Testing Tutorial</title>
    </properties>
    <body>
		<section name="Interactive Web Service Testing">
		<p>Using the Groovy TestStep, it is possible to create both input and output dialogs, which can be useful
		if you for example want to make it easy to run your tests with user-supplied in data or if you want to provide
		a soapUI project containing TestCases as demonstrations of your web services for your clients.</p> 
		<columns><column><div>
		In this example we will create a TestCase that performs an Amazon Book search 
		on Author and displays the number of hits. We need the following TestSteps:
		<ul>
			<li>A Properties Step to hold global properties</li>
			<li>A Groovy Step for showing an input dialog</li>
			<li>A Property Transfer that transfers the input value to the search request</li>
			<li>A Request Step that performs the search</li>
			<li>A Property Transfer that gets the result to a global property</li>
			<li>A Groovy Step for displaying the result</li>
		</ul>
		</div></column><column><img src="images/interactive1.gif" alt="Test Steps for Interactive Testing tutorial"/></column></columns>
		<subsection name="Properties">
		<columns><column><div>The following properties will be defined:
		<ul>
		<li><b>Author</b> : holds the author entered by the user</li>
		<li><b>SubscriptionID</b> : holds the Amazon subscription id</li>
		<li><b>ResultCount</b> : holds the result count for display</li>
		</ul>
		</div></column><column><img src="images/interactive2.gif" alt="Properties for Interactive SOAP Test"/></column></columns>
		</subsection>

		<subsection name="Groovy Input">
		<p>The following script will be used to ask the user for the author to search on:</p>
		<source><font size="-1">// create dialog
def dialog = com.eviware.soapui.support.UISupport.createConfigurationDialog( "Amazon Query" );
dialog.addTextField( "Author", "The Author to search on" );

// init values and show
def map = new java.util.HashMap();
map.put( "Author", "" );

if( dialog.show( map ))
{
   // get target step
   def step = testRunner.testCase.getTestStepByName( "Properties" );

   // assign
   step.setPropertyValue( "Author", map.get( "Author" ));
}
else testRunner.cancel( "No author to search on!" );</font></source>
      <p>When running the script, the user will be prompted with a dialog and the entered value will be set in the 
      Global Properties Step.</p>
		
		</subsection>
		<subsection name="Search Args Transfer">
		<p>The Search Args Transfer contains 2 property transfers, one for the SubscriptionID
		and one for the Author property. Each is transferred from the Global Properties step to the Search Request using 
		an XPath expression. For the SubscriptionID this is:</p>
		<source>declare namespace ns='http://webservices.amazon.com/AWSECommerceService/2006-03-08';
//ns:SubscriptionId/text()</source>
		<p>and for the Author it is</p>
		<source>declare namespace ns='http://webservices.amazon.com/AWSECommerceService/2006-03-08';
//ns:Author/text()</source>
		<p>(See the following Request Step to see the target XML)</p>
		<p align="center"><img src="images/interactive3.gif" alt="Property transfer for Interactive Web Service Test"/></p>
		</subsection>
		
		<subsection name="Using Property Replacement">
		<p>As of soapUI 1.6, it is possible to use the common <code>${propertyName}</code> to expand properties 
		as described in <a href="../functional/testcases.html#Property_Expansion">Property Expansion</a>. Using this feature we 
		can remove the "Search Args Transfer" step and instead use the following request:</p>
		<source><![CDATA[<ns:ItemSearch>
   <ns:SubscriptionId>${SubscriptionId}</ns:SubscriptionId>
   <ns:Request>
      <ns:SearchIndex>Books</ns:SearchIndex>
      <ns:Author>${Author}</ns:Author>
   </ns:Request>
</ns:ItemSearch>]]></source>
         <p>This will result in the values for SubscriptionId and Author being copies into the request just before it 
         is sent (the inserted values will not be written into the request seen in the editor).</p>
		
		</subsection>
		
		
		<subsection name="Search Request">
		<p>The following search request will be used:</p>
		<source><font size="-1"><![CDATA[<soapenv:Envelope xmlns:ns="http://webservices.amazon.com/AWSECommerceService/2006-03-08" 
	xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Body>
      <ns:ItemSearch>
         <ns:SubscriptionId>?</ns:SubscriptionId>
         <ns:Request>
            <ns:SearchIndex>Books</ns:SearchIndex>
            <ns:Author>?</ns:Author>
         </ns:Request>
      </ns:ItemSearch>
   </soapenv:Body>
</soapenv:Envelope>]]></font></source>
		</subsection>
		<subsection name="Result Transfer">
		<p>This step extracts the number of hits in the result and transfers it to the 
		Global Properties "ResultCount" property using the following XPath expression:</p>
		<source>declare namespace ns1='http://webservices.amazon.com/AWSECommerceService/2006-03-08';
//ns1:TotalResults/text()</source>
		<p align="center"><img src="images/interactive4.gif" alt="Property Transfer in soapUI"/></p>
		
		</subsection>
		<subsection name="Groovy Display Result">
		<p>The following script will be used to display the result:</p>
		<source><font size="-1">// get target step
def step = testRunner.testCase.getTestStepByName( "Properties" );
com.eviware.soapui.support.UISupport.showInfoMessage(
   "Got " + step.getPropertyValue( "ResultCount" ) + " hits for author [" +
   step.getPropertyValue( "Author" ) + "]" );</font></source>
      
		</subsection>
		<subsection name="Running the TestCase">
		<columns><column><p>Running the TestCase produces the following input
		dialog:</p><img src="images/interactive5.gif" alt="Input dialog for Interactive Web Service Test"/></column><column>
		<p>and shows the following result:</p> 
		<img src="images/interactive6.gif" alt="Result of Interactive Web Service Testing"/></column></columns>
		
		</subsection>
		<subsection name="Summary">
		<p>The example above is very simple but shows the possibilities, creating more complex UI's and flows is
		definitely possible, but maybe questionable as soapUI is not (yet?) a BPEL tool and has been created for other
		purposes. But then again... if it works and helps you out... ;-)</p>
		</subsection>

		<p><hr size="1"/>Next: <a href="surveillance.html">Web Service Surveillance Testing</a></p>

		</section>
    </body>
</document>


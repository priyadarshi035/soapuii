<?xml version="1.0"?>
<document>
    <properties>
        <title>userguide - soapUI WSDL Interfaces</title>
    </properties>
    <body>
		<section name="WSDL Interfaces">
		 
		 <p>In the current implementation of the internal soapUI object model, WSDL Interfaces
		 correspond to SOAP/HTTP Bindings for a PortType. Once imported using the "Add WSDL.." action,
		 the interfaces' operations and default requests will be visible in the navigator tree. The actual import process 
		 is below described in <a href="#WSDL_Importing_Details">more detail</a>.</p>
		 <subsection name="Interface Actions">
		 <columns><column><div>
		 The following actions are available from the interface nodes' right-button menu:
		 <ul>
		 <li><b>Show Interface Viewer</b> : Opens the <a href="interfaceview.html">Interface Viewer</a> window</li>
		 <li><b>Generate Code</b> : Invokes one of the integrated tools as described under <a href="../tools/index.html">Tool Integrations</a></li>
		 <li><b>Check WSI Compliance</b> : Invokes the WS-I Basic Profile <a href="wsi.html">validation tools</a> for this interface</li>
		 <li><b>Launch TcpMon</b> : launches TcpMon for this interface as described in
		 <a href="../tools/tcpmon.html">TcpMon Integration</a>.</li>
		 <li><b>Generate TestSuite</b> : Generates a complete TestSuite for this interface <a href="functional/testsuites.html">(see more here)</a></li>
		 <li><b>Generate MockService</b> : Generates a complete MockService for this interface <a href="mock/services.html">(see more here)</a></li>
		 <li><b>Generate Documentation</b> : Generates a simple HTML documentation for the entire WSDL defining the Interface</li>
		 <li><b>Update Definition</b> : <a href="#Updating_the_Interface_Definition">see below</a></li>
		 <li><b>Refactor Definition (Pro Only)</b> : Starts the WSDL refactor definition Wizard. <a href="refactoring.html">Read More Here</a></li>
		 <li><b>Export Definition</b> : prompts for a local folder and saves the entire definition (including imported/included documents) to
		 that folder. Import/Include statements in the exported files will be modified accordingly to maintain the definitions integrity</li>
		 <li><b>Remove</b> : prompts to remove the interface from its containing project. When removing an Interface, all
		 test-requests associated with operations in that Interface will also be removed from their respective TestCases.</li>
		 <li><b>Online Help</b> - Displays this page in an external browser</li>
		 </ul>
		 </div></column></columns>
		 </subsection>
		 
		 <subsection name="Updating the Interface Definition">
		 <p>The "Update Definition" action prompts from where to reload the definition for this interface. Updating will 
		 synchronize any changes in the underlying Binding/PortType as best as possible:</p>
		 <ul>
		 	<li>New operations are added as new Operations in the navigator</li>
		 	<li>Operations not available any more can either be mapped to new ones (if they were renamed) or removed. 
		 	When removing operations, all test-requests associated with them will also be removed from their 
		 	respective TestCases.</li>
		 </ul>
		 <p>This action is useful in the following situations:</p>
		 <ul>
		 	<li>When the definition URL for a service/interface has changed (for example moved to another server)</li>
		 	<li>When the definition itself has changed (for example new operations have been added or the associated
		 	XML Schema has been modified</li>
		 </ul>
		 <p>The dialog for updating a definition is as follows:</p>
		 <p align="center"><img src="images/update_interface.gif"/></p>
		 <p>The options are:</p>
		 <ul>
		 <li><b>Definition URL</b> - The URL to the definition (i.e. WSDL) to update from</li>
		 <li><b>Create New Requests</b> - If there are new operations in the updated WSDL, selecting this option 
		 will create new default requests for them</li>
		 <li><b>Recreate Requests</b> - Will recreate all requests in the project that use this definition, including
		 TestRequest steps in associated TestCases.</li>
		 <li><b>Recreate Optional</b> - Set creation of optional elements/attributes when updating requests</li>
		 <li><b>Keep Existing</b> - Keeps existing values in requests that are recreated (this is limited to
		 elements/attributes that have the same namespace/name before and after the update)</li>
		 <li><b>Create Backups</b> - Since recreating requests can potentially invalidate/modify the request in a way 
		 not desired, selecting this option will create a backup request or disabled TestRequest Step containing the original 
		 request.</li>
		 <li><b>Update TestRequests</b> - All TestRequests in the containing project for the updated interface will 
		 be updated as configured above.</li>
		 <li><b>Open Request List</b> - Opens a separate window after the update containing a list of all Requests/TestRequests
		 that have been modified during the update-procedure (useful for manual post-processing).</li>
		 </ul>
		 
		 <p>If there is no binding in the specified definition matching the previous binding for the selected interface 
		 (for example if the binding has been renamed) an error will be displayed.</p>
		 </subsection>
		 
		  <subsection name="Caching Definitions">
		 <p>By default soapUI caches the entire WSDL/XSD definition in the project file, mainly for the 
		 following reasons:</p>
		 <ul>
		 <li><b>Change Independence</b> - validations, etc are not affected by external changes to the definition. This may be
		 both good or bad</li>
		 <li><b>Work Offline</b> - one can work offline with request generation, validations, tests, etc.</li>
		 <li><b>Fast Access</b> - the soapUI attachments feature always requires access to the interface definition</li>
		 </ul>
		 <p>The major drawback is that the soapUI project-file will grow accordingly; if the definition is a complex one this may take
		 considerable processing power. If you for this or some other reason would like to disable definition caching this can be done
		 either globally in the <a href="../preferences.html#WSDL_Settings">soapUI Preferences</a> dialog, or on a per-project basis in the 
		 <a href="../projects/index.html#Project_Details_Tab">Projects Details Tab</a>.</p>
		 <p>Turning this option off will clear currently cached definitions first when soapUI restarts. If you want to force the reloading
		 of a WSDL definition (whether it is cached or not) use the Update Definition action described above.</p>
		 </subsection>
		 
		 <subsection name="Interface Details Tab">
			 The "Details" tab shown in the bottom-left shows the following values when an Interface node is selected in 
			 the navigation tree
			 <ul>
			 <li><b>PortType</b> (read-only): The name of the WSDL PortType that the Binding exposes</li>
			 <li><b>Description</b> : an arbitrary description for the interface</li>
			 <li><b>Definition URL</b> (read-only): the URL where the Interface is defined (i.e. from where it was imported)</li>
			 <li><b>Binding</b> (read-only): The name of the WSDL Binding for the interface in <code>{namespace}name</code> format</li>
			 <li><b>SOAP Version</b> : The SOAP Version to use for this interface; SOAP 1.1 or SOAP 1.2. This will affect both 
			 generated requests (namespaces and content) and according HTTP Headers</li>
			 <li><b>Cached</b> (read-only): Shows if this definition is currently cached in memory</li>
			 <li><b>Style</b> (read-only): Shows if this is a Document or RPC definition</li>
			 <li><b>WS-A version</b> : Shows wsa namespace version</li>
			 <li><b>WS-A anonymous</b> : indicates the value of WS Addressing anonymous as specified in 
			 <a href="http://www.w3.org/TR/2007/REC-ws-addr-metadata-20070904/#wspolicyanonresponses">
			 Web Services Addressing 1.0 Metadata specification</a>. Allowed values are:
				 <ol>
				 	<li>optional - default</li>
				 	<li>required - if AnonymousResponses element defined</li>
				 	<li>prohibited - if NonAnonymousResponses element defined</li>
				 </ol>
			 </li>
			 
			 </ul>
		 </subsection>
		 
		 
		 <subsection name="WSDL Importing Details">
		 <p>When importing a WSDL using one of the 
		 "Import WSDL .." project actions, the import proceeds as follows;</p>
		  <ul>
		 <li>The specified WSDL is loaded and searched for defined WSDL Services. If the WSDL is secured soapUI will display 
		 an authentication dialog asking for relevant credentials. Once the WSDL has been loaded,
		 each of the included services' ports' binding is imported as a separate Interface into the soapUI project 
		 (provided that it is a SOAP 1.1/1.2 binding). If no services are found, the importer searches for 
		 standalone SOAP Bindings that are not bound to any service, these are imported as separate interfaces</li>
		 <li>For each imported Binding, its PortTypes Operations are added as Operations and a default request is 
		 created (if specified) from the operations request schema.</li>
		 <li>Either the name of the Binding or its PortType is used as the Interface name in soapUI, as controlled by
		 the corresponding "Name with Binding" <a href="../preferences.html#WSDL_Settings">WSDL Setting</a>.</li>
		 </ul>
		 <p>The reasons for mapping Interfaces to WSDL Bindings and not WSDL services directly are:</p>
		 <ul>
		 <li>A WSDL Service can "implement" multiple bindings (through WSDL ports), each is imported as a separate
		 Interface into soapUI</li>
		 <li>A Binding can be "implemented" by several WSDL Services (for example on different servers or as a 
		 part of a more complex service interface). soapUI allows association of multiple service endpoints (see below)
		 for a  binding so it is easy to work with the same binding (i.e. Interface) without having to 
		 import each separately.</li>
		 <li>Bindings can be defined without any referencing service, it should still be possible to work with these from soapUI</li>
		 </ul>
		  <p>When importing the following XML-Schemas are added by default and need not be imported explicitly by the WSDL and/or
		 its contained/imported/included types:</p>
		 <ul>
		 <li>http://www.w3.org/2004/08/xop/include : XOP includes used by MTOM</li>
		 <li>http://www.w3.org/2004/11/xmlmime : xmime types used by MTOM</li>
		 <li>http://www.w3.org/2005/05/xmlmime : xmime types used by MTOM</li>
		 <li>http://www.w3.org/XML/1998/namespace : XML Namespaces</li>
		 <li>http://ws-i.org/profiles/basic/1.1/xsd : swaref types used by SOAP with Attachments support</li>
		 <li>http://www.w3.org/2001/XMLSchema : XML Schema itself</li>
		 </ul>
		 
		 <p>It is possible to specify a custom directory containing additional default schemas in the 
		 <a href="../preferences.html#WSDL_Settings">WSDL Settings</a> preferences tab; "Schema Directory". Note that
		 content-changes to an already specified directory will not be detected by soapUI and thus 
		 currently require a restart.</p>
		 </subsection>
		 
		  <p><hr size="1"/>Next: <a href="interfaceview.html">Interfaces Overview</a></p>
		</section>
    </body>
</document>


<?xml version="1.0"?>
<document>
    <properties>
        <title>SOAP Response Validation - soapUI Test Request Assertions</title>
    </properties>
    <body>
		<section name="Test Request Assertions">
		 
		 <p>One of the major quality assurance features of soapUI is the ability assert the content of response messages.
		 soapUI comes with a number of different Assertions in order to cover the needs of high quality Testing.</p>
		 
		 <p>Hopefully these assertions make a useful testing toolbox that will allow Agile testing of Web Services.
		 Currently the following assertions are available:</p>
		 <table><tr><th>Type</th><th>Description</th></tr>
		 <tr><td><a href="#Schema_Compliance_Assertion">Schema Compliance</a> *</td><td>Validates the response message against its xml schema</td></tr>
		 <tr><td><a href="#Simple_Contains_Assertion">Simple Contains</a></td><td>Checks for the existence of a token</td></tr>
		 <tr><td><a href="#Simple_NotContains_Assertion">Simple Not Contains</a></td><td>Checks for the non existence of a token</td></tr>
		 <tr><td><a href="#Soap_Fault_Assertion">SOAP Fault</a> *</td><td>Checks that the response is a soap fault</td></tr>
		 <tr><td><a href="#Not_Soap_Fault_Assertion">Not SOAP Fault</a> *</td><td>Checks that the response is not a soap fault</td></tr>
		 <tr><td><a href="#SOAP_Response_Assertion">SOAP Response</a> *</td><td>Checks that the response is valid SOAP Response</td></tr>
		 <tr><td><a href="#Response_SLA_Assertion">Response SLA</a> *</td><td>Checks the response time to be under a specified value</td></tr>
		 <tr><td><a href="#XPath_Match_Assertion">XPath Match</a></td><td>Matches the result of a specified XPath expression against a predefined value</td></tr>
		 <tr><td><a href="#XQuery_Match_Assertion">XQuery Match</a></td><td>Matches the result of a specified XQuery expression against a predefined value</td></tr>
		 <tr><td><a href="#Script_Assertion">Script Assertion</a></td><td>Allows a custom Groovy script for asserting the message exchange</td></tr>
		 <tr><td><a href="#WS-Security_Status_Assertion">WS-Security Status</a> *</td><td>Checks that incoming WS-Security processing was successful</td></tr>
		 <tr><td><a href="#WS-Addressing_Response_Assertion">WS-Addressing Response Assertion</a></td><td>Checks that the response has valid WS-A header properties</td></tr>
		 <tr><td><a href="#WS-Addressing_Request_Assertion">WS-Addressing Request Assertion</a></td><td>Checks that the request has valid WS-A header properties</td></tr>
		 </table>
		 <p>Assertions marked with a (*) are "singular assertions", meaning that they can be added only once to a TestRequest</p>
		 
		 
		 				
				<table class="relatedInfo" cellspacing="0" cellpadding="0">
	<tr class="a">
    	<td width="75" style="padding-top:5px">
        	<img src="../../images/where_do_i_start.jpg" alt="Start soapUI Testing" longdesc="http://www.soapui.org"></img>
        </td>
        <td>
            <table class="relatedInner">
              <tr>
                <td>
                	<span class="relatedInfoHeader">Did you know?</span>
                </td>
              </tr>
              <tr>
                <td>
                    <div>
						<p>
						The XPath Match assertion is greatly simplified in <b><i>soapUI Pro</i></b>. The XPath Editor simplifies and improves your XPath Assertions.
						</p>
						<p>
						<b><i>soapUI Pro</i></b> contains productivity enhancements as well as offers Professional World Class support.
						</p>
                    </div>
                </td>
              </tr>
              <tr align="right">
              	<td>
                	<span class="relatedLinks"><a href="http://www.eviware.com/component/option,com_wrapper/Itemid,41/" title="try soapUI Pro" onclick="javascript:urchinTracker:('/downloadTrial');">
                                               <img src="../../images/try_pro_100.png" alt="Try soapUI pro to soap test" width="101" height="20" longdesc="http://www.eviware.com"/></a></span>
                </td>
              </tr>
            </table>
		</td>
	</tr>
</table>
		 

		
		 <subsection name="Schema Compliance Assertion">
		 <p>The Schema Compliance assertion checks that the response is compliant with the response messages 
		 XML Schema definition. If not, a list of validation errors as those displayed in the <a href="../requests.html#Message_Validation">validation-tab</a> of the
		 request editors is displayed and the assertion fails. The list of errors is also displayed in the assertion 
		 tab of the TestRequest Editor; errors are double clickable and will highlight the row of the validation error
		 if possible.</p>
		 <p>The assertion has only one configuration-parameter which is prompted for when creating/configuring 
		 a schema compliance assertion; the URL to the WSDL definition to use for validation. This defaults to the URL of
		 the definition for the containing TestRequests' Operations' Interface.</p>
		 <p>Schema Compliance validation is currently targeted at Basic-Profile compliant WSDL's/messages and thus only 
		 supports for literal-encoded messages (both rpc and document), validation of SOAP-encoded messages is <i>not</i> supported and will result in a validation error in any case.</p>
		 <p>Be aware of the fact that a SOAP-Fault will only be a schema validation if the detail element contains a 
		 message part that is defined in the corresponding binding and not compliant with its corresponding schema 
		 definition (see the SOAP-Fault assertion below regarding validations of SOAP-Fault response messages).</p>
		 </subsection>
		 
		 <subsection name="Simple Contains Assertion">
		 <p>The "Simple Contains" assertion simply checks for the existence of a specified substring in the received
		 response. No xml-parsing/validation is performed at all</p>		 
		<p>The assertion has 3 configuration-parameter which is prompted for when creating/configuring 
		 a simple-contains assertion:</p>
		 <p align="center"><img src="images/contains_assertion.gif" alt="Simple Contains Assertion Editor"/></p>
		 <p>The options are:</p>
		 <ul>
		 <li><b>Content</b> - the content to look for</li>
		 <li><b>Ignore Case</b> - ignores case (!)</li>
		 <li><b>Regular Expression</b> - evaluates token as regular expression, 
		 <a target="_new" href="http://www.jdocs.com/javase/7.b12/java/util/regex/Pattern.html">Read More</a> on supported
		 Regular Expression syntax</li>
		 </ul>
		 </subsection>

		 <subsection name="Simple NotContains Assertion">
		 <p>The Simple NotContains assertion simply checks for the non-existence of a specified substring in the received
		 response. No xml-parsing/validation is performed at all.</p>		 
		<p>The assertion has the same configuration parameters as described for the Contains assertions above.</p>
		 </subsection>

		 <subsection name="SOAP Fault Assertion">
		 <p>The SOAP-Fault assertion simply checks that the received response is a SOAP Fault.</p>
		 <p>This assertion has no configuration parameters.</p>
		 </subsection>
		 
		 <subsection name="Not Soap Fault Assertion">
		 <p>The Not SOAP-Fault assertion simply checks that the received response is not a SOAP-Fault. This should be used
		 in conjunction with the Schema Compliance since a SOAP Fault does not get validated against any schema (unless
		 there is a Fault Part defined in the WSDL and that Fault Part is present in the response) 
		 This assertion has no configuration parameters.</p>
		 </subsection>
		 
		  <subsection name="SOAP Response Assertion">
		 <p>Validates that the response is a valid SOAP Message. This is the minimal assertion that should be added to catch 
		 empty responses or HTTP error pages. This assertion has no configuration parameters.</p>
		 </subsection>
		 
		 <subsection name="Response SLA Assertion">
		 <p>The Response SLA assertion simply checks that the response time is under the configured limit.</p>		 
		 </subsection>
		 
		 <subsection name="WS-Security Status Assertion">
		 <p>The WS-Security Status assertion checks that the incoming message has valid WS-Security headers.</p>		 
		 </subsection>

		 <subsection name="XPath Match Assertion">
		
		 <p>The XPath Match assertion allows specification of an XPath expression to be
		 evaluated against the received response message and compare its result to a predefined value. Expressions
		 can select everything from attribute values, make Boolean evaluations or select the entire response body.
		 (XmlUnit is used internally for comparing xml elements, nodes or hierarchies)</p>
		 <p>soapUI internally uses the Saxon 9 XPath processor which has support for both
		 <a target="_new" href="http://www.w3.org/TR/xpath">XPath 1.0</a> and 
		 <a target="_new" href="http://www.w3.org/TR/xpath20/">XPath 2.0</a>.</p>
		  <p>The configuration dialog for the XPath-match assertion is divided into 2 areas (see below); the top XPath area which 
		  contains the desired XPath expression and the bottom result area which contains the expected result.</p>
		 <p align="center"><img src="images/xpath_match_dialog.gif" border="0" alt="Creating an XPath expression in the soapUI Pro Xpath Match editor"/></p>
		  <p>The toolbar for the top XPath area contains the following actions (left to right):</p>
		  <ul>
		    <li><b>Select XPath (soapUI Pro only)</b> - opens the <a href="../xpath_selector.html">XPath Selector</a> for the current response</li>
		    <li><b>Declare</b> - adds namespace declaration for all namespaces currently defined in the underlying 
		  	response message to the XPath expression. Saxon uses this syntax for namespace declarations so you
		  	can later use them in your XPath expression.</li>
		  </ul>
		  	<p>And the toolbar for the bottom content-match area contains the following actions (left to right):</p>
	  	  <ul>
		  	<li><b>Select from current</b> - evaluates the specified XPath expression against the current response message
		  	(if available) for the underlying request. The result is written into the result area of the configuration 
		  	dialog.</li>
		  	<li><b>Test</b> - evaluates the specified XPath expression against the current response message
		  	(if available) for the underlying request and compares that result with the value specified in the result
		  	area. This is essentially the same comparison that is performed during a "real" assertion.</li>
		  	<li><b>Allow Wildcard</b> - Allows '*' wildcard in attribute and element values, these will be skipped during comparison 
		  	(see tutorial below).</li>
            <li><b>IgnoreNamespace Prefixes</b> (not shown in screenshot) - will ignore differing namespace prefixes in comparison.</li>
		  	<li><b>Select Content (soapUI Pro only)</b> - Allows one to select an existing property whose value must match that of the
		  	selected XPath value (as in screenshot above).</li>
		  </ul>
		  	
		<p>The bottom button bar shows the follows:</p>
			<li><b>Help</b> - Opens this page in a windows</li>		  	
		  	<li><b>Save</b> - saves the current XPath/result values and closes the dialog.</li>
		  	<li><b>Cancel</b> - discards the current XPath/result values and closes the dialog.</li>
		  <p>The dialog is modeless allowing you to move focus back to soapUI and for example select values from 
		  the underlying response message.</p>
		  
		  <h4>Creating XPath Assertions</h4>
		  <p>The recommended way to create an XPath assertion is as follows:</p>
		  <ol>
		  	<li>Submit the TestRequest and await its response (so you have response to test)</li>
		  	<li>Create the XPath Assertion and begin by adding namespace declarations to the XPath expression with 
		  	the "Declare" button</li>
		  	<li>Now add the actual XPath expression after the namespace declarations, 
		  	<code>count(//ns1:Item)</code> in the screenshot above</li>
		  	<li>Use the "Select from current" button to evaluate the XPath expression against the available result 
		  	and check that it returns what you expect; <code>10</code> in the screenshot above</li>
		  	<li>Double-check by pressing the "Test" button which should return an OK message since the test will
		  	compare the XPath selection result with the previously selected value</li>
		  </ol>
		  <p>With soapUI Pro the creation is greatly simplified through the 
		  <a href="response-wizards.html#Add_Assertion_Wizard">Add Assertion Wizard</a> which performs step 2 and forward
		  through a simple right-click action.</p>
		  <h4>Creating XPath Assertions with Wild cards</h4>
		  <p>The wild card feature allows for assertion of large blocks of xml where selected attribute/element-values are 
		  ignored during comparison. Follow steps 1-4 above but specify an XPath expression that returns a block 
		  of xml. For example an Amazon Search Response returns a descriptive "OperationResponse" element which
		  can be selected with the following XPath-expression:</p>
		  <source>declare namespace ns1='http://webservices.amazon.com/AWSECommerceService/2006-11-14';
//ns1:ItemSearchResponse/ns1:OperationRequest</source>
		  <p>After using the "Select from current" button, the Expected Result field will contain the following:</p>
		  <source><![CDATA[<OperationRequest xmlns="http://webservices.amazon.com/AWSECommerceService/2006-11-14" ...>
  <HTTPHeaders>
    <Header Name="UserAgent" Value="Jakarta Commons-HttpClient/3.0.1"/>
  </HTTPHeaders>
  <RequestId>*</RequestId>
  <Arguments>
    <Argument Name="Service" Value="AWSECommerceService"/>
  </Arguments>
  <RequestProcessingTime>*</RequestProcessingTime>
</OperationRequest>]]></source>
		  <p>Since the UserAgent@Value, RequestId and RequestProcessingTime will vary between responses,
		  we want to ignore them in our assertion; check the "Allow Wildcards" checkbox and replace their 
		  values with a '*'. The Expected Result field should now look as follows:</p>
		  	<p align="center"><img src="images/xpath_contains_wildcards.gif" border="0" alt="XPath Matching with wildcards in soapUI Pro"/></p>
		  <p>and in following test-runs these values will be ignored.</p>
		  
		 <h4>XPath Assertion Examples</h4>
		 <p>Here are some examples expressions for a search-result from the Amazon web-service returning 10 hits when 
		 searching on books with the word "Oxford" in their title. The following assertions could be created;</p>
		 <p>Validate that the result contains 10 hits</p>
		 <source>declare namespace ns1='http://webservices.amazon.com/AWSECommerceService/2005-07-26';
count(//ns1:Item)</source>
		 <p>which will return "10". </p>
		 <p>Validate that the ProductGroup element always is "Book":</p>
		 <source>declare namespace ns1='http://webservices.amazon.com/AWSECommerceService/2005-07-26';
count(//ns1:ProductGroup[text()!='Book'])</source>
 		<p>which will return "0". </p>
		 <p>Validate that DetailPageURL always starts with 'http://www.amazon.com/exec/obidos':</p>
		 <source>declare namespace ns1='http://webservices.amazon.com/AWSECommerceService/2005-07-26';
count(//ns1:DetailPageURL) = count(//ns1:DetailPageURL[starts-with(text(), 'http://www.amazon.com/exec/obidos')])</source>
		 <p>which will return "true"</p>
		 </subsection>
		 
		 <subsection name="XQuery Match Assertion">
		 <p>The XQuery Match assertions is configured exactly like the XPath Math assertion described above, 
		 the only difference being that the specified expression is evaluated as an XQuery 2.0 expression instead.</p>
		 <p align="center"><img src="images/xquery_match_dialog.gif" alt="XQuery MAtch Editorin soapUI Pro"/></p>
		 <p>This assertion is useful when you want to assert a subset of your data and for example not be 
		 dependent on other data, the data order, etc. In the example in the screenshot, a list of ordered ids is 
		 created from the response and compared against a predefined list, resulting in an assertion that will not
		 fail if the items come in another order and/or get more/other data "around" the id element.</p>
		 </subsection>
		 
		 <subsection name="Script Assertion">
		 <p>The Script Assertion allows for arbitrary validations (see examples below). 
		 When creating or double clicking a script assertion, a Groovy script editor is shown as follows;</p>
		 <p align="center"><img src="images/script_assertion_editor.gif"/></p> 
		 <p>The assertion script can be run against the latest message exchange with the run button in the top left</p>
		 <p>The script has access to the following objects:</p>
		 <ul>
		<li><code>messageExchange</code> : the <a href="../../apidocs/com/eviware/soapui/model/iface/MessageExchange.html">MessageExchange</a>
		for the current request/response. Gives direct access to message content, HTTP Headers, Attachments, etc.</li>
		<li><code>context</code> : the <a href="../../apidocs/com/eviware/soapui/model/testsuite/TestRunContext.html">TestRunContext</a>
		running the current TestCase, this will for now always be an instance of
		<a href="../../apidocs/com/eviware/soapui/impl/wsdl/testcase/WsdlTestRunContext.html">WsdlTestRunContext</a></li>
		<li><code>log</code> : a standard log4j <code>Logger</code> object available for logging arbitrary information</li>
		 </ul>
		 <p>An assertion script should throw an Exception with the failure message to fail the assertion. One can also use
		 the built in Groovy assert statement for an easy assertion syntax as shown in the examples below.
		 If the assertion is valid, either return nothing or a status message that will be shown in the TestCase Log.</p>
		 <h4>Assertion Script Examples</h4>	 
		 <p>Validate a certain response time:</p>
		 <source>assert messageExchange.timeTaken &lt; 400</source>
		 <p>Validate existence of a response HTTP Header:</p>
		 <source>assert messageExchange.responseHeaders["x-amz-id-1"] != null</source>
		 <p>Validate the existence of a specific element using GroovyUtils (although this would be easier with a standard
		 XPath-Contains assertion):</p>
		 <source>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def holder = groovyUtils.getXmlHolder( messageExchange.responseContent )

assert holder["//ns1:RequestId"] != null</source>
		 </subsection>
		 
		 <subsection name="WS-Addressing Response Assertion">
		 <p>Validates that the response has valid WS-A header properties. When creating or double clicking a ws-addressing response assertion, 
		 configuration panel is opened where you can choose which properties are to be validated.</p>
		 <p align="center"><img src="images/wsa_response_assertion_panel.gif" alt=""></img></p>
		 </subsection>
		 
		 <subsection name="WS-Addressing Request Assertion">
		 <p>Validates that the request has valid WS-A header properties. When creating or double clicking a ws-addressing request assertion, 
		 configuration panel is opened where you can choose which properties are to be validated.</p>
		 <p align="center"><img src="images/wsa_request_assertion_panel.gif" alt=""></img></p>
		 </subsection>

		  <p><hr size="1"/>Next: <a href="response-wizards.html">soapUI Pro Request and Response Wizards</a></p>
		</section>
    </body>
</document>


<?xml version="1.0"?>
<document>
    <properties>
        <title>Using properties and property expansions in soapUI</title>
    </properties>
    <body>
        <section name="Using Properties in soapUI">
        <p>soapUI opens for the use of custom "properties" for storing custom values within a Project. A "property" is a named 
        string value (currently all properties are handled as strings), that can be accessed from a 
        <a href="scripting.html">Groovy Script</a>, a 
        <a href="functional/propertytransfers.html">Property Transfer</a> or a 
        <a href="#Property_Expansions">Property-Expansion</a> references. soapUI allows for the definition of 
        properties at multiple levels within the project hierarchy;</p>
		<ul>
		<li><a href="projects/index.html"><b>Projects</b></a> : for handling Project scope values, for example a subscription ID</li>
		<li><a href="functional/testsuites.html"><b>TestSuite</b></a> : for handling TestSuite scoped values, can be seen as "arguments" to a TestSuite</li>
		<li><a href="functional/testcases.html"><b>TestCases</b></a> : for handling TestCase scoped values, can be seen as "arguments" to a TestCase</li>
		<li><a href="functional/propertiesstep.html"><b>Properties TestStep</b></a> : for providing local values/state within a TestCase</li>
		<li><b>Local TestStep properties</b> : several TestStep types maintain their own list of properties specific to their
		functionality : <a href="functional/datasourcestep.html">DataSource</a>, <a href="functional/datasinkstep.html">DataSink</a>, 
		<a href="functional/runtestcasestep.html">Run TestCase</a></li>
		<li><a href="mock/services.html"><b>MockServices</b></a> : for handling MockService scoped values/arguments</li>
		<li><a href="mock/responses.html"><b>MockResponses</b></a> : for handling MockResponse scoped values</li>
		<li><a href="#Global_Properties_in soapUI"><b>Global Properties</b></a> : for handling Global properties, optionally from an external source</li>
		</ul>       
		<p>Apart from these custom properties, many soapUI objects expose their own built in properties, see
		<a href="#Built-In_Properties"></a> for a list of which are available.</p>
		<subsection name="Property Editors">
        <p>Properties are generally editable in three places:</p>
        <ol>
        <li>From the selected objects main editor window in a <i>Properties inspector</i>:</li>
        <p align="center"><img src="images/properties_editor.gif" alt="Properties Inspecotr in soapUI"/></p>
        <li>From the selected objects Details tab (bottom left) in a <i>Test Properties</i> tab</li>
        <p align="center"><img src="images/test_properties_tab.gif" alt="Test Properties in soapUI"/></p>
        <li>From the navigator itself when in <a href="overview.html#Property-Mode">Property_Mode</a>.</li>
        </ol>
        <p>The table available in the first two options has buttons to Add, Remove, and Clear and Import properties from 
        an external source. In the table both names and values of properties can be edited as desired.</p>
        <p>When renaming a property, soapUI will attempt to refactor all references to that property in both 
        <a href="#Property_Expansion_in_soapUI">Property Expansions</a> and Property Transfers.</p>
        </subsection>
        
        <subsection name="Global Properties in soapUI">
		 <p>Global properties are handled in the <a href="preferences.html#Global_Properties">Global Properties preferences tab</a>, 
		 which contains a standard property-table as described above. Is is also possible to specify an external properties-file 
		 by adding a -Dsoapui.properties argument in the soapui.bat/.sh file.</p>
		 <p>For example, create a properties-file named "properties.txt" containing</p>
		 <source>test.a.property=hello!</source>
		 <p>in the soapUI bin folder. Modify the java arguments in the soapUI.bat file to be</p>
		 <source>set JAVA_OPTS=%JAVA_OPTS% -Xms128m -Xmx256m -Dsoapui.properties=properties.txt</source>
		 <p>Add the following Property-Expansion to a TestRequest, Endpoint, etc...</p>
		 <source>${test.a.property}</source>
		 <p>When expanded, the specified properties file will be loaded as shown in the soapUI log:</p>
		 <source>01:20:05,234 INFO  [PropertyExpansionRequestFilter] Loaded 52 properties from [C:\workspace\core\project.properties]</source>
		 <p>This feature can be especially useful when wanting to specify global endpoints or authentication 
		 settings, just specify the corresponding expansions in the endpoint or authentications properties and
		 they will get expanded when used</p>

         <p>Both global and system properties can be set directly from the command-line when running any of
         the soapUI bat/sh files; -Dproperty.name=value sets a system property and -Gproperty.name=value sets a Global
             Property.</p>   
		 </subsection>
		
		<subsection name="Property Expansion in soapUI">
		 <p>soapUI provides a common syntax to dynamically insert ("expand") property values during processing. 
		 The syntax is as follows:</p>
		 <source>${[scope]propertyName[#xpath-expression]}</source>
		 <p>where scope can be one of the following literal values:</p>
		 <ul>
		 <li><code>#Project#</code> - references a Project property</li>
		 <li><code>#TestSuite#</code> - references a TestSuite property in the containing TestSuite</li>
		 <li><code>#TestCase#</code> - references a TestCase property in the containing TestCase</li>
		 <li><code>#MockService#</code> - references a MockService property in the containing MockService</li>
		 <li><code>#Global#</code> - references a global property (optional)</li>
         <li><code>#System#</code> - references a system property</li>
         <li><code>#Env#</code> - references a environment variable</li>
		 <li><code>[TestStep name]#</code> - references a TestStep property within the current TestCase</li>
		 </ul>
		 <p>Many of the scopes will of course only work if they are available, i.e. you can not use the #MockService#
		 scope within a TestCase script since there is no containing MockService to access.</p>
		 <p>If no scope is specified, the property is resolved as follows:</p>
		 <ol>
		 <li>Check the current context (for example the TestRunContext) for a property with the matching name</li>
		 <li>Check for a matching global property</li>
		 <li>Check for a matching system property</li>
		 </ol>
		 
	    <p>If the property expansion further includes an XPath expression, this will be used to select the 
	    corresponding value from the referenced property value (which must contain XML), for example the following 
	    example could "extract" the author value from a preceding response with:</p>
 		<source>${Search Request#Response#//ns1:Item[1]/n1:Author[1]/text()}</source>
		<p>Which would first get the "Response" property of the "Search Request" step and then select the value of 
		the first Items' first Author element. Note that the namespace prefix must match those used in the response
		message, otherwise the expansion will fail.</p>
		 <p>As you can see, there is no way to access properties "outside" scope, i.e. you can not access a property in 
		 another TestCase from within a TestStep. The is a deliberate restriction aiming to reduce dependencies between
		 items in a project. If you need to transfer values between (for example) two TestCases you should use the containing
		 common TestSuite or Project as an intermediary; the first TestCase transfers to the common parent using a
		 Property-Transfer or Groovy script, the second reads from the same parent. In this way, there is no direct
		 dependency between the two TestCases and the value supplied by the first TestCase can be supplied by any 
		 other source (TestCase, Script, etc...) or statically.</p>
		   <p><a href="functional/propertytransfers.html">Property Transfers</a> are a more tedious way of accomplishing the same 
		 functionality as with property-expansion. On the other hand, property transfers provide the possibility
		  to transfer complex content between request, response messages. Also, the result of a Property Transfer is
		  visible directly in the corresponding request, response editors.</p>
		</subsection>

        <subsection name="Dynamic Properties">
        <p>soapUI 2.5 introduces the possibility to write groovy scripts directly inside a PropertyExpansion;
            prefix the content with a '=' and the remaining content up to the closing brace will be evaluated as
            a script and its result will be inserted. For example</p>
            <source>${=(int)(Math.random()*1000)}</source>

            <p>will be replaced with a random number between 0 and 999 every time it is evaluated.</p>
            <p>Of course this applies to all places where property-expansions can be used; requests, property values,
                file names, endpoints, etc.. etc..</p>
            <p>Depending on the context of the expansion, relevant variables will be available for accessing the
                soapUI object model. For example in a request message or parameter, the containing Request object
                will be available through the "request" variable, allowing you to (for example) insert its name
                in your request</p>
            <source>...
<name>${=request.name}</name>
...</source>

<p>or if you want the name of the project just navigate up the soapUI ModelItem tree:</p>

             <source>...
<name>${=request.operation.interface.project.name}</name>
...</source>

            <p>The following variables are (almost) always available in these scripts:</p>

            <ul><li>log : a log4j Logger logging to the groovy log window</li>
                <li>modelItem : the current modelItem (for example a Request, MockResponse, etc..).</li>
                <li>context : the current run-context (for example when running a TestCase och MockService)</li>
                </ul>
                <p>For soapUI Pro users, the global script library is available just as in any other script,
                    allowing you to call into objects/methods defined there for reuse.

                One current limitation is that although scripts can be multiple lines, they can not contain
                    nested braces (yet).. as always there is room for improvement!
                 </p>





            
        </subsection>

		<subsection name="Nested Properties">
		 <p>soapUI supports both nested and recursive property-expansion (be careful!), for example:</p>
		 <source><![CDATA[test = "value"
testexp = "${test}" 

-> "${testexp}" evaluates to "value"]]></source>
				<source><![CDATA[
testexp = "value"
exp = "${exp}" 

-> "${test${exp}}" evaluates to "value"]]></source>
				<source><![CDATA[testxml = "<test><value id="123">hello</value></test>"
testxpath = "//value[@id=${id}]/text()"
id = "123"

-> "${#testxml#${testxpath}}" evaluates to "hello"]]></source>
		 </subsection>
		 
		 <subsection name="Property Expansion Points">
		 <p>Property Expansion is supported in many places in soapUI:</p>
		 <ul>
		 <li>request messages</li>
		 <li>mock response messages (from the MockRunContext see <a href="mock/responses.html#Response_Scripts">Response Scripts</a>),
		 testStepName is ignored.</li>
		 <li>XPath and XQuery assertions and their matching values</li>
		 <li>Contains and Not-Contains content assertions</li>
		 <li>Request endpoints and authentication settings</li>
		 <li>custom request or mock response HTTP Headers</li>
		 <li>Property-Transfer source and target XPath expressions</li>
		 <li>DataSource step configuration values (soapUI Pro only)</li>
		 <li>MockResponse step response messages (soapUI Pro only)</li>
		 <li>Property Values in DataSink teststeps</li>
		 <li>Outgoing WSS-related username and password values</li>
		 <li>SAML Assertions</li>
		 </ul>
		 <p>If the specified property in an expansion is not available during processing, an empty 
		 string will be output instead. If you are missing the possibility to expand in a desired place, 
		 please let us know so we can add support there as well!</p>
		 
		</subsection>
		
		 <subsection name="Built-In Properties">
		 <p>The table below lists all properties available for property-expansion and property-transfers. The
		 corresponding properties can also be seen in the Navigator when in "Property-Mode".</p>
		
		<table>
		<tr><td colspan="2">
		 <h4>TestRequest Step</h4></td></tr>
		 <tr><th>Property</th><th>Description</th></tr>
		<tr>
		 	<td>Request</td>
		 	<td>The configures request message</td>
	 	</tr>
	 		<tr>
		 	<td>Response</td>
		  <td>The last response message (read-only)</td>
	 	</tr>
		<tr>
		 	<td>Endpoint</td>
		 	<td>The current endpoint for the request</td>
	 	</tr>
		<tr>
		 	<td>Username</td>
		 	<td>The current username for the request</td>
	 	</tr>
		<tr>
		 	<td>Password</td>
		 	<td>The current password for the request</td>
	 	</tr>
		<tr>
		 	<td>Domain</td>
		 	<td>The current domain for the request</td>
	 	</tr>
	 	<tr><td colspan="2">
	 	
	 	 <h4>Properties</h4>
		 </td></tr><tr><th>Property</th><th>Description</th></tr>
		<tr>
		 	<td>&lt;any defined property&gt;</td>
		 	<td>the properties' value</td>
	 	</tr>
	 	<tr><td colspan="2">
	 	<h4>GroovyScript Step</h4></td></tr>
		 <tr><th>Property</th><th>Description</th></tr>
		<tr>
		 	<td>result</td>
		 	<td>the value returned by the script from its last run (read-only)</td>
	 	</tr>
	 	<tr>
		 	<td>script</td>
		 	<td>the script itself</td>
	 	</tr>
	 	<tr><td colspan="2">
	 	
	 	 <h4>Run TestCase Step</h4></td></tr>
		 <tr><th>Property</th><th>Description</th></tr>
		<tr>
		 	<td>&lt;any defined property in the target TestCase&gt;</td>
		 	<td>the properties' value</td>
	 	</tr>
	 	
	 	<tr><td colspan="2">
	 	 <h4>DataSource Step (soapUI Pro only)</h4></td></tr>
		 <tr><th>Property</th><th>Description</th></tr>
		<tr>
		 	<td>&lt;any defined property&gt;</td>
		 	<td>the properties' value (read-only)</td>
	 	</tr>
	 	<tr><td colspan="2">
	 	 <h4>DataSink Step (soapUI Pro only)</h4></td></tr>
		 <tr><th>Property</th><th>Description</th></tr>
		<tr>
		 	<td>&lt;any defined property&gt;</td>
		 	<td>the properties' value</td>
	 	</tr>
	 	
	 	<tr><td colspan="2">
	 	 <h4>MockResponse Step (soapUI Pro only)</h4></td></tr>
		 <tr><th>Property</th><th>Description</th></tr>
		 <tr>
		 	<td>Request</td>
		 	<td>The last request message (read-only)</td>
	 	 </tr>
	 	<tr>
		 	<td>Response</td>
		  <td>The configured response message</td>
	 	</tr>
	 	</table>
		 
		 </subsection>
		 
		   <p><hr size="1"/>Next: <a href="functional/index.html">Functional Testing Web Services
</a></p>
		</section>
    </body>
</document>


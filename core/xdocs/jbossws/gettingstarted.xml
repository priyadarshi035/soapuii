<?xml version="1.0"?>
<document>
    <properties>
        <title>JBossWS Plugin - Getting Started</title>
    </properties>
    <body>
		
		<subsection name="Discontinued">
		<p><b>2007-14-11 : We have decided to discontinue JBoss WS IDE.</b></p>
		<p>2007-14-11 : JBoss WS IDE is as of the 14:th of November 2007 discontinued. This does not mean 
		our support for JBoss WS has ended, we have only chosen to stop producing within JBoss. soapUI will continue its
		strong support for JBoss, just not <b>as</b> JBoss, rather as a independent Open Source software producer.</p>
		<p>Look at our <a href="../userguide/tools/index.html">tools Pages</a> for more info. </p>
		</subsection>
		
		<section name="Getting Started with the JBossWS Plugin">
		
		<columns><column>
		<p>JBossWS-related functionality is made available as a JBossWS-Nature which can be enabled for 
		any type of Java-project. This allows you to easily publish, consume and implement web service 
		from most kinds of projects (web, ejb, jar, etc.). Enabling the nature adds a "JBossWS Web Services" 
		node to the project which corresponds to a soapUI-project.xml file in the file system. In the Eclipse 
		Project Explorer, this node will contain all Web Services handled by the project:</p>
		<ul>
		<li>Published Web Services - generated from existing EJB / Pojos as described under 
		<a href="bottomup.html">Publishing Web Services</a>.</li>
		<li>Imported Web Services - imported from external Web Services either for
		<a href="consume.html">consuming</a> or <a href="topdown.html">implementing</a> from in the project.</li>
		</ul>
		
		</column>
		<column><img src="images/projectexplorer.gif"/></column></columns>
		
		<p>Internally, this node corresponds to a soapUI project-node (with some limitations), specific actions 
		available for this node are:</p>
		<columns><column>
		<ul>
		<li><b>Save</b> - saves changes specific to this node</li>
		<li><b>Add WSDL from URL</b> - imports an external Web Service definition (for example for implementing or
		for consuming)</li>
		<li><b>Add WSDL from File</b> - imports an existing Web Service definition (for example for implementing)</li>
		<li><b>Online Help</b> - shows online help</li>
		</ul>
		</column><column>
		<img src="images/jbossws_project_menu.gif"/>
		</column></columns>
		<p>More information on this node and its functionality is available in the 
		<a href="../eclipse/index.html">Eclipse User-Guide</a>.</p>
		
		<subsection name="Enabling JBossWS Support">
		
		<p>Enable the nature for a project by selecting "JBossWS / Add JBossWS Nature" from the project menu:</p>
		<p align="center"><img src="images/addjbosswsnature_menu.gif"/></p>
		<p>This will prompt with the following dialog:</p>
		<p align="center"><img src="images/addjbosswsnature.gif"/></p>
		<p>The prompted options control the basic behaviour of a JBossWS project:</p>
		<ul>
		<li><b>Output Source Directory</b> - the directory into which source code is to be generated when 
		<a href="topdown.html">implementing</a> a Web Service</li>
		<li><b>JBossWS WSTools</b> - the path to the installed WSTools script included in the JBossWS 
		distribution. This option defaults to the global setting (as described above), but can be changed on
		a project basis (for evaluating new versions).</li>
		<li><b>Output Classes Directory</b> - the binary directory for Java classes that are to be 
		<a href="bottomup.html">published</a> as web services.</li>
		<li><b>Add JBossWS JAR</b> - adds the bundled JBossWS-client.jar to the projects classpath. Select
		this option if you intend to use any Web Service specific API's/class (annotations, jax-rpc, etc).</li>
		</ul>
		<p>Once the JBossWS Nature has been enabled, these settings are available for later modification from
		the projects properties:</p>
		<p align="center"><img src="images/jbossws_properties.gif"/></p>
		<p>Once the JBossWS Nature has been enabled, you are now ready to:</p>
		<ul>
		<li><a href="bottomup.html">Publish</a> an existing POJO/EJB as a Web Service</li>
		<li><a href="consume.html">Consume</a> an external Web Service from within your code</li>
		<li><a href="topdown.html">Implement</a> an existing Web Service definition</li>
		<li><a href="annotations.html">Annotate</a> an existing POJO/EJB3 to be published as a JAX-WS Web Service</li>
		</ul>
		
		</subsection>
		
		<p><hr size="1"/>Next: <a href="bottomup.html">Publishing Web Services with JBossWS</a></p>
		</section>
    </body>
</document>

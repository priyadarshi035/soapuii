<?xml version="1.0"?>
<document>
    <properties>
        <title>JBossWS Plugin - publishing</title>
    </properties>
    <body>
		
		<subsection name="Discontinued">
		<p><b>2007-14-11 : We have decided to discontinue JBoss WS IDE.</b></p>
		<p>2007-14-11 : JBoss WS IDE is as of the 14:th of November 2007 discontinued. This does not mean 
		our support for JBoss WS has ended, we have only chosen to stop producing within JBoss. soapUI will continue its
		strong support for JBoss, just not <b>as</b> JBoss, rather as a independent Open Source software producer.</p>
		<p>Look at our <a href="../userguide/tools/index.html">tools Pages</a> for more info. </p>
		</subsection>
		<section name="Publishing Web Services">
		<p>Publishing a Web Service refers to the process of exposing an existing POJO or EJB as a Web Service, 
		either using JSR-109/J2EE based artifacts or using JSR-181 annotations, the JBossWS plugin here acts
		as a wrapper around the JBossWS WSTools utility and related processes which are described in the 
		<a target="_new" href="http://labs.jboss.com/portal/jbossws/user-guide/en/html/endpoints.html">JBossWS user guide</a>.
		</p>
		
		<p>Once the JBossWS Nature has been enabled for a project as described in the 
		<a href="gettingstarted.html">Getting Started</a> document, you can right-click on a Java-class and select
		the "JBossWS - Publish as Web Service" option:</p>
		<p align="center"><img src="images/publish_menu.gif"/></p>
		
		<subsection name="Setting Publish Options">
		
		<p>The Basic tab has the following options:</p>
		<p align="center"><img src="images/publish_tab1.gif"/></p>
		<ul>
		<li><b>Interface</b> - the Java interface that is to be published, a list containing all 
		interfaces implemented by the selected class will be shown</li>
		<li><b>Service Name</b> - a name for the service to be published</li>
		<li><b>Style</b> - if the service should be document or RPC style</li>
		<li><b>Parameter Style</b> - if the parameters should be wrapped or bare (only for Document style Web Services)</li>
		<li><b>Deploy as</b> - selects if the generated Web Service should be deployed as a POJO (using 
		a servlet) or an EJB.</li>
		<li><b>Servlet/EJB-link</b> - depending on the "Deploy as" setting, this specifies the name of the 
		link for the generated Servlet or EJB</li>
		<li><b>Deployment Descriptor</b> - should point either to a web.xml (for POJO's) or ejb-jar.xml (for EJB's). 
		Generated descriptors will be merged into the specified file</li>
		<li><b>Endpoint</b> - the endpoint under which the Web Service should be accessible. Depends on the 
		deployment and project type (will be automatically suggested/generated in a future version)</li>
		</ul>
		
		<p>The Advanced tab has the following option:</p>
		<p align="center"><img src="images/publish_tab2.gif"/></p>
		<ul>
		<li><b>Output WEB-INF Directory</b> - target for generated configuration/mapping files. The JBossWS
		plugin will merge generated files into existing ones in this directory.</li>
		<li><b>Package</b> - name of a war package to create when publishing as POJO. This will use the 
		packaging features available in JBossIDE to automatically create a war that can directly be deployed
		to a JBossWS installation</li>
		<li><b>Mapping-file</b> - the name of a JAX-RPC mapping file to create, relative to the output WEB-INF
		directory. If the file exists, generated mappings will be merged into the existing file.</li>
		<li><b>Target NS</b> - the target namespace for the generated WSDL, defaults to "urn:&lt;package-name&gt;"</li>
		<li><b>Types NS</b> - the namespace for the generated xml-schema types, defaults to "urn:&lt;package-name&gt;.types"</li>
		<li><b>Mapping Override</b> - a previously available jaxrpc-mapping file to use instead of the generated one. 
		If specified, the file will be copied into the specified output WEB-INF directory and the generated entry in 
		webservices.xml will use this file instead.</li>
		<li><b>WSDL Override</b> - a previously available WSDL file to use instead of the generated one. If specified, 
		the file will be copies into the specified output WEB-INF directory and the generated entry in webservices.xml 
		will use this file instead.</li>
		<li><b>WSDL Port to Use</b> - if overriding the WSDL, you need to specify which actual port in your
		WSDL that should be regarded as the one in use. This will be set in the webservices.xml file.</li>
		<li><b>Import Interface</b> - controls if the generated WSDL is to be imported/updated into the underlying JBossWS 
		project node for testing, etc... Uncheck this option if you for example implementing a WSDL that has already 
		been imported</li>
		</ul>
		</subsection>
		
		<subsection name="Generating">
		<p>Once all options have been set as required, select the "Generate" button at the bottom of the dialog 
		which will invoke the WSTools utility as configured. The output will be shown in the console view:</p>
		<p align="center"><img src="images/publish_console.gif"/></p>
		<columns><column><div>The last 2 rows in the above output show that the generated WSDL has been 
		imported into the 
		associated soapUI project; in the Project Explorer you can now expand the "JBossWS Web Services" node
		and browse the imported WSDLs operations or requests as "normally".</div>
		<p>The generated mapping/configuration files are visible under the specified output directory. The plugin will
		in all cases try to merge created files with existing ones.</p>
		<p>When running the above procedure (for example after adding a new method to the class that 
		is being published), the WSDL will be updated and the corresponding soapUI project will be updated 
		accordingly if the "Import Interface" option has been selected.</p>
		</column><column><img src="images/publish_project.gif"/></column></columns>
		
		</subsection>
		
		<subsection name="Deployment">
		<p>When running the plugin under JBossIDE and specifying a deployment Package as described above, the JBossWS
		plugin will create a WAR file in the project root containing the current projects classes and WEB-INF directory.
		Deploy the file by right-clicking and select "Run As / Run on Server" and then selecting a configured JBoss
		server instance.</p>
		<p> 
		The package can be seen and modified under "Project Properties / Packaging Configurations".</p>
		<p align="center"><img src="images/deployment_package.gif"/></p>
		
		</subsection>
		
		<p><hr size="1"/>Next: <a href="consume.html">Consuming Web Services with JBossWS</a></p>
		</section>
    </body>
</document>

<?xml version="1.0"?>
<document>
    <properties>
        <title>JBossWS Plugin - consuming</title>
    </properties>
    <body>
		
		<subsection name="Discontinued">
		<p><b>2007-14-11 : We have decided to discontinue JBoss WS IDE.</b></p>
		<p>2007-14-11 : JBoss WS IDE is as of the 14:th of November 2007 discontinued. This does not mean 
		our support for JBoss WS has ended, we have only chosen to stop producing within JBoss. soapUI will continue its
		strong support for JBoss, just not <b>as</b> JBoss, rather as a independent Open Source software producer.</p>
		<p>Look at our <a href="../userguide/tools/index.html">tools Pages</a> for more info. </p>
		</subsection>
		<section name="Consuming Web Services">
		<p>Consuming an existing Web Service boils down to creating client side artifacts and then 
		creating instances for invoking the remote service, the process consists of 2 steps:</p>
		<ol>
		<li>Adding the external WSDL to the "JBossWS Web Services" node</li>
		<li>Generating a client side classes for invoking the service</li>
		</ol>
		
		<subsection name="Adding the WSDL">
		<p>Add the WSDL to the JBossWS Web Services node by selecting the 
		"JBossWS - Add WSDL from URL" option:</p>
		<p align="center"><img vspace="20" src="images/addwsdlfromurl.gif" alt="adding wsdl to the jbossWS"/></p>
		<p>This will prompt for a WSDL and import it accordingly into the project</p>
		
		<p>If the WSDL resides locally in the file system it can be added using the corresponding
		"JBossWS - Add WSDL from File" option. If it is part of the current project, it can be 
		added by selecting the "JBossWS - Add to JBossWS Project" option from the WSDL's right-button menu:</p>
		<p align="center"><img src="images/addwsdlfromfile.gif" alt="jBossWs - Add WSDL"/></p>
		
		</subsection>
		
		<subsection name="Generating artifacts">
		<p>Once the WSDL has been imported, select the "Generate - JBossWS artifacts" option from its 
		right-button menu:</p>
		<p align="center"><img src="images/generate_menu.gif"/></p>
		
		<columns><column><div>This will open a dialog with the following options:</div>
		<ul>
		<li><b>Use Cached WSDL</b> - the plugin caches the WSDL internally when it is added
		to the project (this can be switched off in the global preferences..). Uncheck this option
		if you want to generate from the original WSDL location.</li>
		<li><b>Mapping file</b> - the name of a JAX-RPC mapping file to generate for the WSDL (required!)</li>
		<li><b>Unwrap</b> - unwraps doc-literal operations</li>
		<li><b>Namespace Mapping</b> - a table containing all namespaces defined in the imported WSDL, you
		must specify a destination package for each namespace.</li>
		</ul>
		</column>
		<column><img src="images/generate_dialog.gif"/></column>
		</columns>
		<p>Once all options have been set as required, select the "Generate" button at the bottom of the dialog 
		which will invoke the WSTools utility as configured. The output will be shown in the console view:</p>
		<p align="center"><img src="images/generate_console.gif"/></p>
		<columns><column>
		
		<p>The generated files will be placed in the folder specified under project properties. Currently, 
		the JBossWS plugin lacks support for automatically adding service-refs to components that are to 
		consume the service, this must be performed manually as described in the
		<a target="_new" href="http://labs.jboss.com/portal/jbossws/user-guide/en/html/clients.html">JBossWS User Guide</a>
		</p>
		</column>
		<column> <img src="images/generate_project.gif"/></column>
		</columns>
		</subsection>
		
		<p><hr size="1"/>Next: <a href="topdown.html">Implementing a Web Service</a></p>
		</section>
    </body>
</document>

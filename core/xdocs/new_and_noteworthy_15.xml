<?xml version="1.0"?>
<document>
    <properties>
        <title>soapUI 1.5 </title>
    </properties>
    <body>
		<section name="Welcome to soapUI 1.5">
		<subsection name="Overview">
		<columns><column><div>
		soapUI 1.5 contains a large number of small improvements and a small number of large ones, the latter mostly
		enhancing load/functional-testing of Web Services. This document	outlines those few large ones, the small 
		improvements will be covered in detail by the 1.5 documentation. If you have any problems please post a
		message to the mailing list or one of the sourceforge forums so we can fix it in the next beta.
		<p>soapUI 1.5 <b>should</b> work out of the box with 1.0.x projects, but you are advised to make backup of your projects 
		to be on the safe side...</p></div>
		</column>
		<column>
			<a href="images/screenshot3.gif" target="_new"><img src="images/screenshot3_tn.gif" alt="load testing of web services" border="0"/></a>
		</column></columns>
		</subsection>
		
		<section name="LoadTesting">
		<subsection name="Overview">
		 <p>soapUI 1.5 provides extensive load-testing functionality allowing you to perform:</p>
		 <ul>
		 <li>Functional LoadTesting : validate functionality under load using standard TestCase methods</li>
		 <li>Behavioral LoadTesting : analyze performance behaviour under varying load with different 
		     <a href="userguide/loadtest/configuration.html#LoadTest_Strategies">load strategies</a></li>
		 <li>Performance LoadTesting : find maximal performance available using thread strategies and 
		 <a href="userguide/commandline/loadtest.html">commandline execution</a></li>
		 <li><a href="userguide/loadtest/index.html#Requirements-Driven_Load_Testing">Requirements-Driven LoadTesting</a> : define performance 
		 requirements and continuously validate using <a href="userguide/loadtest/assertions.html">load-test assertions</a></li>
		 </ul>
		 
		 <p>Any number of LoadTests can be created for a TestCase (using the TestCases "New LoadTest" popup-menu action), 
		 each with different strategies, assertions, etc. to validate/assess a TestCases and its TestSteps performance 
		 under different circumstances. LoadTests can be run both interactively in soapUI or
		from the commandline, allowing scheduled Load Tests to be used for performance surveillance (for example).</p>
		
		<p>Right click on a TestCase and selected "New LoadTest" (you can create any number of Load Tests), this will 
		open the following LoadTest view after prompting for a title:</p>
		<p align="center"><img src="images/loadtest_1.gif" alt="soap load test"/></p>
		<p>The view is divided into 3 parts (top-down):</p>
		<ul>
		<li>A toolbar with general actions, test-limit, interactive thread-count and strategy settings</li>
		<li>A statistics table showing the statistics for each step in the Load Test</li>
		<li>A log showing general messages and any assertions errors</li>
		</ul>
		</subsection>
		<subsection name="Assertions">
		<p>The log at the bottom has an additional tab showing the configured Load Test assertions:</p>
		<p align="center"><img src="images/loadtest_3.gif" alt="load test assertions in soap testing"/></p>
		<p>When running a LoadTest, the configured assertions are applied and will generate an error in the log if not met:</p>
		<p align="center"><img src="images/loadtest_4.gif" alt="load test assertions generate an error in the log"/></p>
		<p>Assertion errors can be double-clicked and will show a view displaying the entire request/response that 
		failed the assertion;</p>
		<p align="center"><img src="images/teststep_result_1.gif" alt="Assertions errors can be double-clicked in soap testing"/></p>
		</subsection>
		<subsection name="Limit, ThreadCount and Strategies">
		<p>A LoadTest is controlled by its limit (by time or number of requests), threadcount and strategy. There are 
		currently 4 available strategies:</p>
		<ul>
		<li><b>Simple</b> : allows the setting of a testcase delay and randomization factor. Use this for standard 
		load/stress-testing, set both values to 0 for "full-throttle" testing.</li>
		<li><b>Variance</b> : varies the number of threads over time. Use this for monitoring behaviour under varying load</li>
		<li><b>Burst</b> : holds all threads for a specified time and runs them of a another specified time. Use this to
		simulate intermittent peak loads.</li>
		<li><b>ThreadCount</b> : steps the threadcount from a start to an end value over time. Use this to (for example) find which
		thread-count will give the best TPS (transactions per second) value</li> 
		</ul>
		<p>Since you can have multiple LoadTests for a TestCase, you can create several with different strategies / configurations. 
		Also, you can run several tests simultaneously in soapUI so you can (for example) see how a Burst-strategy test affects 
		the average time of a Simple strategy test</p>
		</subsection>
		<subsection name="Diagrams">
		<p>The toolbar actions include opening of 2 types of diagrams:</p>
		<ul>
		<li>A statistics diagram showing all statistics for a selected teststep</li>
		<li>A statistic value diagram showing one statistic value for all teststeps</li>
		</ul>
		<p>Both these are meant to be used for <i>behavioural</i> analysis, ie seeing trends over time. Exact values/legends
		are not shown;</p>
		<p align="center"><img width="800" src="images/loadtest_2.gif" alt="selected test steps for soap testing"/></p>
		</subsection>
		<subsection name="CommandLine Runner">
		<p>A <code>com.eviware.soapui.tools.SoapUILoadTestRunner</code> is available for running Load Tests from the commandline,
		the same arguments as described for the <code>com.eviware.soapui.tools.SoapUILoadTestRunner</code> are valid, with the
		introduction of <code>-l&lt;loadtest name&gt;</code>, <code>-r</code> for reporting and <code>-f&lt;folder name&gt;</code>.
		Failed results and error logs will be exported to text-files for viewing.</p>
		</subsection>
		</section>
		
		<section name="Functional Testing">
		<subsection name="Overview">
		<p>Functional testing has been enhanced in a number of ways, most notably by the introduction of a Properties teststep
		which can be used for global properties and of a Grooy teststep which allows you to do more or less "anything" in a testcase, 
		for example data-driven testing, notifications, external integrations, etc...</p>
		<p>Minor enhancements include:</p>
		<ul>
		<li>Much enhanced ValueTransfer teststep allowing transfer of properties between any other teststeps</li>
		<li>TestCase options for setting session keeping, failure on error, etc.</li>
		<li>A TestSuite viewer/runner (see below)</li>
		<li>Possibility to loop a testcase continuously</li>
		</ul>
		</subsection>
		<subsection name="Properties TestStep">
		<p>The properties teststep allows you to define a number of properties which can further be loaded to/saved from
		a local file or URL (optionally specified by a system property). The defined properties can then be assigned/used 
		from a groovy script or a ValueTransfer. The PropertiesStep editor is a simple table as follows:</p>
		<p align="center"><img src="images/teststep_properties_1.gif" alt="properties step for soap test"/></p>
		</subsection>
		
		<subsection name="Groovy Script TestStep">
		<p>The GroovyScript teststep allows you to execute an arbitrary Groovy script in your testcase. The script has
		full access to the soapUI object-model, allowing it to modify other teststeps, get external data, etc.</p>
		<p align="center"><img src="images/teststep_groovy_1.gif" alt="Test step Groovy for soap test"/></p>
		<p>The shown script sets the property "boss" of another teststep to a "random" value</p>
		</subsection>
		
		<subsection name="TestSuite Runner">
		<p>The TestSuite view (opened by double-clicking a TestSuite) allows you to run a selection of contained 
		TestCases in sequence or parallel from within soapUI:</p>
		<p align="center"><img src="images/testsuite_view_1.gif" alt="contained test cases"/></p>
		</subsection>
		
		</section>
		
		<section name="Other Notable Enhancements">
		
		<subsection name="Preferences">
		<p>A preferences dialog invoked from the main menu allows you to set a number of general options:</p>
		<p align="center"><img src="images/preferences_dialog.gif" alt="preference dialog invoked from main menu for soap test"/></p>
		
		</subsection>
		<subsection name="Improved Logging">
		<p>Logging has been color-coded and improved to include a HTTP wire log and a separate log for groovy scripts:</p>
		<p align="center"><img src="images/log_tabs.gif" alt="HTTP wire log for soap test"/></p>
		</subsection>
		
		</section>
		
		</section>
    </body>
</document>
